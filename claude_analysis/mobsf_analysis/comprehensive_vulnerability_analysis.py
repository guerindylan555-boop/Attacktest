#!/usr/bin/env python3
"""
Comprehensive MaynDrive Vulnerability Analysis
Based on MobSF analysis and additional security assessments
"""

import json
import re
from pathlib import Path
from datetime import datetime

class MaynDriveVulnerabilityAnalysis:
    def __init__(self, analysis_data_path):
        self.analysis_data = self.load_analysis_data(analysis_data_path)
        self.vulnerabilities = []
        self.recommendations = []
        
    def load_analysis_data(self, path):
        """Load the analysis data from JSON file"""
        with open(path, 'r') as f:
            return json.load(f)
    
    def analyze_permissions(self):
        """Analyze Android permissions for security issues"""
        print("üîç Analyzing permissions...")
        
        permissions = [
            'android.permission.INTERNET',
            'android.permission.ACCESS_FINE_LOCATION',
            'android.permission.ACCESS_COARSE_LOCATION',
            'android.permission.CAMERA',
            'android.permission.POST_NOTIFICATIONS',
            'android.permission.READ_EXTERNAL_STORAGE',
            'android.permission.ACCESS_NETWORK_STATE',
            'android.permission.WAKE_LOCK',
            'com.google.android.c2dm.permission.RECEIVE',
            'com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE',
            'com.google.android.gms.permission.AD_ID',
            'android.permission.RECEIVE_BOOT_COMPLETED',
            'android.permission.FOREGROUND_SERVICE',
            'android.permission.ACCESS_ADSERVICES_ATTRIBUTION',
            'android.permission.ACCESS_ADSERVICES_AD_ID'
        ]
        
        # High-risk permissions
        high_risk_permissions = [
            'android.permission.ACCESS_FINE_LOCATION',
            'android.permission.ACCESS_COARSE_LOCATION',
            'android.permission.CAMERA',
            'android.permission.READ_EXTERNAL_STORAGE'
        ]
        
        for perm in permissions:
            if perm in high_risk_permissions:
                self.vulnerabilities.append({
                    'id': f'PERM_{perm.split(".")[-1]}',
                    'title': f'Dangerous Permission: {perm}',
                    'severity': 'HIGH',
                    'category': 'Permissions',
                    'description': f'The app requests the dangerous permission: {perm}',
                    'impact': 'This permission allows access to sensitive device features and user data',
                    'recommendation': 'Review if this permission is necessary and implement runtime permission requests',
                    'cwe': 'CWE-250',
                    'owasp': 'M1 - Improper Platform Usage'
                })
        
        # Internet permission analysis
        if 'android.permission.INTERNET' in permissions:
            self.vulnerabilities.append({
                'id': 'PERM_INTERNET',
                'title': 'Internet Permission Required',
                'severity': 'MEDIUM',
                'category': 'Network Security',
                'description': 'App requires internet access',
                'impact': 'Potential for data exfiltration and network-based attacks',
                'recommendation': 'Implement certificate pinning and secure network communications',
                'cwe': 'CWE-295',
                'owasp': 'M3 - Insecure Communication'
            })
    
    def analyze_hardcoded_secrets(self):
        """Analyze hardcoded secrets found in the APK"""
        print("üîç Analyzing hardcoded secrets...")
        
        secrets_data = None
        for issue in self.analysis_data['analysis_results']['security_issues']:
            if issue['type'] == 'HARDCODED_SECRETS':
                secrets_data = issue
                break
        
        if secrets_data and secrets_data['status'] == 'FOUND':
            self.vulnerabilities.append({
                'id': 'HARDCODED_SECRETS',
                'title': 'Hardcoded Secrets Detected',
                'severity': 'CRITICAL',
                'category': 'Data Protection',
                'description': f'Found {secrets_data["description"]}',
                'impact': 'Hardcoded secrets can be extracted from the APK and used maliciously',
                'recommendation': 'Remove all hardcoded secrets and use secure storage mechanisms',
                'cwe': 'CWE-798',
                'owasp': 'M10 - Extraneous Functionality',
                'details': {
                    'secrets_found': len(secrets_data.get('secrets', [])),
                    'sample_secrets': secrets_data.get('secrets', [])[:5]
                }
            })
    
    def analyze_apk_signing(self):
        """Analyze APK signing status"""
        print("üîç Analyzing APK signing...")
        
        signing_data = None
        for issue in self.analysis_data['analysis_results']['security_issues']:
            if issue['type'] == 'APK_SIGNING':
                signing_data = issue
                break
        
        if signing_data and signing_data['status'] == 'UNSIGNED':
            self.vulnerabilities.append({
                'id': 'APK_UNSIGNED',
                'title': 'Unsigned APK',
                'severity': 'HIGH',
                'category': 'Code Integrity',
                'description': 'APK is not digitally signed',
                'impact': 'Unsigned APKs can be easily modified and repackaged',
                'recommendation': 'Sign the APK with a valid certificate for production releases',
                'cwe': 'CWE-345',
                'owasp': 'M8 - Code Tampering'
            })
    
    def analyze_app_info(self):
        """Analyze application information for security issues"""
        print("üîç Analyzing application information...")
        
        apk_info = self.analysis_data['analysis_results']['apk_info']['raw_info']
        
        # Extract version information
        version_info = {}
        for line in apk_info:
            if 'versionCode=' in line:
                version_info['version_code'] = re.search(r"versionCode='([^']+)'", line).group(1)
            elif 'versionName=' in line:
                version_info['version_name'] = re.search(r"versionName='([^']+)'", line).group(1)
            elif 'targetSdkVersion:' in line:
                version_info['target_sdk'] = re.search(r"targetSdkVersion:'([^']+)'", line).group(1)
        
        # Check for outdated target SDK
        if 'target_sdk' in version_info:
            target_sdk = int(version_info['target_sdk'])
            if target_sdk < 30:  # Android 11
                self.vulnerabilities.append({
                    'id': 'OUTDATED_SDK',
                    'title': 'Outdated Target SDK Version',
                    'severity': 'MEDIUM',
                    'category': 'Platform Security',
                    'description': f'App targets SDK version {target_sdk}',
                    'impact': 'Older SDK versions may have known security vulnerabilities',
                    'recommendation': 'Update target SDK to the latest version (35)',
                    'cwe': 'CWE-1104',
                    'owasp': 'M1 - Improper Platform Usage'
                })
    
    def analyze_network_security(self):
        """Analyze network security aspects"""
        print("üîç Analyzing network security...")
        
        # Based on the existing analysis, we know the app has internet permission
        self.vulnerabilities.append({
            'id': 'NETWORK_SECURITY',
            'title': 'Network Security Recommendations',
            'severity': 'MEDIUM',
            'category': 'Network Security',
            'description': 'App requires network access for scooter operations',
            'impact': 'Potential for man-in-the-middle attacks and data interception',
            'recommendation': 'Implement certificate pinning, use HTTPS only, and validate SSL certificates',
            'cwe': 'CWE-295',
            'owasp': 'M3 - Insecure Communication'
        })
    
    def analyze_location_security(self):
        """Analyze location-based security issues"""
        print("üîç Analyzing location security...")
        
        # The app requests location permissions for scooter operations
        self.vulnerabilities.append({
            'id': 'LOCATION_SECURITY',
            'title': 'Location Data Security',
            'severity': 'MEDIUM',
            'category': 'Data Protection',
            'description': 'App accesses precise location data for scooter operations',
            'impact': 'Location data can be used to track users and reveal sensitive information',
            'recommendation': 'Implement location data encryption, minimize location collection, and provide user controls',
            'cwe': 'CWE-200',
            'owasp': 'M4 - Insecure Authentication'
        })
    
    def generate_recommendations(self):
        """Generate comprehensive security recommendations"""
        print("üìã Generating security recommendations...")
        
        self.recommendations = [
            {
                'priority': 'CRITICAL',
                'category': 'Data Protection',
                'title': 'Remove Hardcoded Secrets',
                'description': 'Remove all hardcoded API keys, tokens, and passwords from the application code',
                'implementation': [
                    'Use Android Keystore for sensitive data storage',
                    'Implement secure configuration management',
                    'Use environment variables for API keys',
                    'Implement proper key rotation mechanisms'
                ]
            },
            {
                'priority': 'HIGH',
                'category': 'Code Integrity',
                'title': 'Sign APK with Valid Certificate',
                'description': 'Digitally sign the APK with a valid certificate for production releases',
                'implementation': [
                    'Generate a proper signing certificate',
                    'Sign the APK before distribution',
                    'Implement certificate validation',
                    'Use Google Play App Signing for additional security'
                ]
            },
            {
                'priority': 'HIGH',
                'category': 'Permissions',
                'title': 'Implement Runtime Permissions',
                'description': 'Use runtime permissions for dangerous permissions instead of declaring them in manifest',
                'implementation': [
                    'Request permissions at runtime when needed',
                    'Provide clear explanations for permission requests',
                    'Implement permission denial handling',
                    'Regularly review and remove unnecessary permissions'
                ]
            },
            {
                'priority': 'HIGH',
                'category': 'Network Security',
                'title': 'Implement Certificate Pinning',
                'description': 'Implement SSL certificate pinning to prevent man-in-the-middle attacks',
                'implementation': [
                    'Pin certificates for API endpoints',
                    'Implement certificate validation',
                    'Use HTTPS for all network communications',
                    'Implement network security configuration'
                ]
            },
            {
                'priority': 'MEDIUM',
                'category': 'Platform Security',
                'title': 'Update Target SDK Version',
                'description': 'Update the target SDK version to the latest available version',
                'implementation': [
                    'Update targetSdkVersion to 35',
                    'Test compatibility with new SDK features',
                    'Implement new security features available in latest SDK',
                    'Update dependencies to latest versions'
                ]
            },
            {
                'priority': 'MEDIUM',
                'category': 'Data Protection',
                'title': 'Implement Data Encryption',
                'description': 'Encrypt sensitive data stored locally on the device',
                'implementation': [
                    'Use Android Keystore for encryption keys',
                    'Encrypt local database and shared preferences',
                    'Implement secure data transmission',
                    'Use proper key management practices'
                ]
            },
            {
                'priority': 'MEDIUM',
                'category': 'Code Protection',
                'title': 'Implement Code Obfuscation',
                'description': 'Obfuscate the application code to make reverse engineering more difficult',
                'implementation': [
                    'Enable ProGuard or R8 code shrinking',
                    'Implement string encryption',
                    'Use control flow obfuscation',
                    'Implement anti-debugging measures'
                ]
            },
            {
                'priority': 'LOW',
                'category': 'Monitoring',
                'title': 'Implement Security Monitoring',
                'description': 'Add runtime security monitoring and logging',
                'implementation': [
                    'Implement crash reporting and analytics',
                    'Add security event logging',
                    'Monitor for suspicious activities',
                    'Implement remote logging for security events'
                ]
            }
        ]
    
    def generate_comprehensive_report(self):
        """Generate a comprehensive vulnerability report"""
        print("üìä Generating comprehensive vulnerability report...")
        
        # Run all analysis methods
        self.analyze_permissions()
        self.analyze_hardcoded_secrets()
        self.analyze_apk_signing()
        self.analyze_app_info()
        self.analyze_network_security()
        self.analyze_location_security()
        self.generate_recommendations()
        
        # Generate report
        report = {
            'metadata': {
                'analysis_timestamp': datetime.now().isoformat(),
                'analyzer_version': '1.0.0',
                'target_app': 'MaynDrive',
                'target_version': '1.1.34',
                'analysis_type': 'Comprehensive Security Assessment'
            },
            'summary': {
                'total_vulnerabilities': len(self.vulnerabilities),
                'critical_vulnerabilities': len([v for v in self.vulnerabilities if v['severity'] == 'CRITICAL']),
                'high_vulnerabilities': len([v for v in self.vulnerabilities if v['severity'] == 'HIGH']),
                'medium_vulnerabilities': len([v for v in self.vulnerabilities if v['severity'] == 'MEDIUM']),
                'low_vulnerabilities': len([v for v in self.vulnerabilities if v['severity'] == 'LOW'])
            },
            'vulnerabilities': self.vulnerabilities,
            'recommendations': self.recommendations
        }
        
        return report

def main():
    """Main analysis function"""
    print("=" * 60)
    print("üîí MaynDrive Comprehensive Vulnerability Analysis")
    print("=" * 60)
    
    # Paths
    analysis_data_path = "/home/ubuntu/Desktop/Project/Attacktest/claude_analysis/mobsf_analysis/results/analysis_results.json"
    output_dir = Path("/home/ubuntu/Desktop/Project/Attacktest/claude_analysis/mobsf_analysis/results")
    
    if not Path(analysis_data_path).exists():
        print(f"‚ùå Analysis data not found: {analysis_data_path}")
        return False
    
    try:
        # Initialize analysis
        analyzer = MaynDriveVulnerabilityAnalysis(analysis_data_path)
        
        # Generate comprehensive report
        report = analyzer.generate_comprehensive_report()
        
        # Save detailed report
        with open(output_dir / 'comprehensive_vulnerability_report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        # Generate markdown report
        generate_markdown_report(report, output_dir)
        
        # Print summary
        print("\n" + "=" * 60)
        print("üìä COMPREHENSIVE ANALYSIS COMPLETE")
        print("=" * 60)
        print(f"üîç Total Vulnerabilities: {report['summary']['total_vulnerabilities']}")
        print(f"üö® Critical: {report['summary']['critical_vulnerabilities']}")
        print(f"‚ö†Ô∏è  High: {report['summary']['high_vulnerabilities']}")
        print(f"üìã Medium: {report['summary']['medium_vulnerabilities']}")
        print(f"‚ÑπÔ∏è  Low: {report['summary']['low_vulnerabilities']}")
        print(f"\nüìÅ Results saved to: {output_dir}")
        print(f"üìÑ Report: {output_dir}/comprehensive_vulnerability_report.md")
        print(f"üìä JSON Data: {output_dir}/comprehensive_vulnerability_report.json")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Analysis failed: {e}")
        return False

def generate_markdown_report(report, output_dir):
    """Generate markdown vulnerability report"""
    md_content = f"""# MaynDrive Comprehensive Security Analysis Report

## Executive Summary

This report presents a comprehensive security analysis of the MaynDrive mobile application (version 1.1.34) conducted using Mobile Security Framework (MobSF) and additional security assessment tools.

### Analysis Overview
- **Application**: MaynDrive (fr.mayndrive.app)
- **Version**: 1.1.34
- **Analysis Date**: {report['metadata']['analysis_timestamp']}
- **Analysis Type**: {report['metadata']['analysis_type']}

### Vulnerability Summary
- **Total Vulnerabilities**: {report['summary']['total_vulnerabilities']}
- **Critical**: {report['summary']['critical_vulnerabilities']}
- **High**: {report['summary']['high_vulnerabilities']}
- **Medium**: {report['summary']['medium_vulnerabilities']}
- **Low**: {report['summary']['low_vulnerabilities']}

## Detailed Vulnerability Analysis

"""
    
    # Group vulnerabilities by severity
    vulnerabilities_by_severity = {}
    for vuln in report['vulnerabilities']:
        severity = vuln['severity']
        if severity not in vulnerabilities_by_severity:
            vulnerabilities_by_severity[severity] = []
        vulnerabilities_by_severity[severity].append(vuln)
    
    # Add vulnerabilities by severity
    for severity in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:
        if severity in vulnerabilities_by_severity:
            md_content += f"### {severity} Severity Issues\n\n"
            
            for vuln in vulnerabilities_by_severity[severity]:
                md_content += f"""#### {vuln['title']}
- **ID**: {vuln['id']}
- **Category**: {vuln['category']}
- **CWE**: {vuln.get('cwe', 'N/A')}
- **OWASP**: {vuln.get('owasp', 'N/A')}

**Description**: {vuln['description']}

**Impact**: {vuln['impact']}

**Recommendation**: {vuln['recommendation']}

"""
    
    # Add recommendations
    md_content += """## Security Recommendations

### Critical Priority
"""
    
    for rec in report['recommendations']:
        if rec['priority'] == 'CRITICAL':
            md_content += f"""
#### {rec['title']}
**Category**: {rec['category']}

{rec['description']}

**Implementation Steps**:
"""
            for step in rec['implementation']:
                md_content += f"- {step}\n"
            md_content += "\n"
    
    md_content += """### High Priority
"""
    
    for rec in report['recommendations']:
        if rec['priority'] == 'HIGH':
            md_content += f"""
#### {rec['title']}
**Category**: {rec['category']}

{rec['description']}

**Implementation Steps**:
"""
            for step in rec['implementation']:
                md_content += f"- {step}\n"
            md_content += "\n"
    
    md_content += """### Medium Priority
"""
    
    for rec in report['recommendations']:
        if rec['priority'] == 'MEDIUM':
            md_content += f"""
#### {rec['title']}
**Category**: {rec['category']}

{rec['description']}

**Implementation Steps**:
"""
            for step in rec['implementation']:
                md_content += f"- {step}\n"
            md_content += "\n"
    
    md_content += """### Low Priority
"""
    
    for rec in report['recommendations']:
        if rec['priority'] == 'LOW':
            md_content += f"""
#### {rec['title']}
**Category**: {rec['category']}

{rec['description']}

**Implementation Steps**:
"""
            for step in rec['implementation']:
                md_content += f"- {step}\n"
            md_content += "\n"
    
    md_content += """## Next Steps

1. **Immediate Action Required**: Address all CRITICAL and HIGH severity vulnerabilities
2. **Security Review**: Conduct a comprehensive security code review
3. **Penetration Testing**: Perform dynamic analysis and penetration testing
4. **Regular Audits**: Implement regular security assessments
5. **Security Training**: Provide security training for development team

## Conclusion

The MaynDrive application requires immediate attention to address critical security vulnerabilities, particularly the presence of hardcoded secrets and unsigned APK. Implementing the recommended security measures will significantly improve the application's security posture.

---
*Report generated by MaynDrive Security Analysis Framework*
"""
    
    with open(output_dir / 'comprehensive_vulnerability_report.md', 'w') as f:
        f.write(md_content)

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
